{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExceededRefinanceLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedFundsTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveLoanState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "parameter",
          "type": "bytes4"
        }
      ],
      "name": "InvalidLoanParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParticipant",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBorrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldBorrower",
          "type": "address"
        }
      ],
      "name": "LoanBorrowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeLoanIndex",
          "type": "uint256"
        }
      ],
      "name": "LoanContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "newLoanState",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "oldLoanState",
          "type": "uint8"
        }
      ],
      "name": "LoanStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hashedTerms",
          "type": "bytes32"
        }
      ],
      "name": "LoanTermsReinstated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hashedTerms",
          "type": "bytes32"
        }
      ],
      "name": "LoanTermsRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "activeLoanCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_activeLoanCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anzaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "checkLoanActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "checkLoanDefault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "checkLoanExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hashedTerms",
          "type": "bytes32"
        }
      ],
      "name": "checkTermsRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "debtBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_childDebtId",
          "type": "uint256"
        }
      ],
      "name": "debtIdBranch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeLoanIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralId",
          "type": "uint256"
        }
      ],
      "name": "debts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeLoanIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "firInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_firInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "fixedInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fixedInterestRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralDebtId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "getDebtTerms",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractTerms",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_borrowerSignature",
          "type": "bytes"
        }
      ],
      "name": "initLoanContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractTerms",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_borrowerSignature",
          "type": "bytes"
        }
      ],
      "name": "initLoanContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "isFixed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_isFixed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "lenderRoyalties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lenderRoyalties",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "loanClose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_loanClose",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "loanCommital",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_loanCommital",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "loanDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_loanDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "loanLastChecked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "loanStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_loanStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "loanState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_loanState",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanTreasurer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRefinances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "mintReplica",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedTerms",
          "type": "bytes32"
        }
      ],
      "name": "reinstateTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedTerms",
          "type": "bytes32"
        }
      ],
      "name": "revokeTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anzaTokenAddress",
          "type": "address"
        }
      ],
      "name": "setAnzaToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralVaultAddress",
          "type": "address"
        }
      ],
      "name": "setCollateralVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanTreasurerAddress",
          "type": "address"
        }
      ],
      "name": "setLoanTreasurer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxRefinances",
          "type": "uint256"
        }
      ],
      "name": "setMaxRefinances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seconds",
          "type": "uint256"
        }
      ],
      "name": "totalFirIntervals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "updateLoanState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "verifyLoanActive",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbed89e2e637cee2e30706abf12255dc1b2d80ac6566ced4c63ca12196207cbce",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "2584292",
    "logsBloom": "0x
    "blockHash": "0xae3cba4e6297f48b951184d77c40789d98bda6e621035fe983ec39d683b5756b",
    "transactionHash": "0xbed89e2e637cee2e30706abf12255dc1b2d80ac6566ced4c63ca12196207cbce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xbed89e2e637cee2e30706abf12255dc1b2d80ac6566ced4c63ca12196207cbce",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xae3cba4e6297f48b951184d77c40789d98bda6e621035fe983ec39d683b5756b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xbed89e2e637cee2e30706abf12255dc1b2d80ac6566ced4c63ca12196207cbce",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x8d24385f76974ce9574accf90a96cb183e175b097a0cdc49dd2ddd96f6374b72",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xae3cba4e6297f48b951184d77c40789d98bda6e621035fe983ec39d683b5756b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xbed89e2e637cee2e30706abf12255dc1b2d80ac6566ced4c63ca12196207cbce",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xae3cba4e6297f48b951184d77c40789d98bda6e621035fe983ec39d683b5756b"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "2584292",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6026b98393f52c3678e3a85d9b556f4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceededRefinanceLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedFundsTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveLoanState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"parameter\",\"type\":\"bytes4\"}],\"name\":\"InvalidLoanParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParticipant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBorrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBorrower\",\"type\":\"address\"}],\"name\":\"LoanBorrowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeLoanIndex\",\"type\":\"uint256\"}],\"name\":\"LoanContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"newLoanState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"oldLoanState\",\"type\":\"uint8\"}],\"name\":\"LoanStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hashedTerms\",\"type\":\"bytes32\"}],\"name\":\"LoanTermsReinstated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hashedTerms\",\"type\":\"bytes32\"}],\"name\":\"LoanTermsRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"activeLoanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeLoanCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anzaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"checkLoanActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"checkLoanDefault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"checkLoanExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hashedTerms\",\"type\":\"bytes32\"}],\"name\":\"checkTermsRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"debtBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_childDebtId\",\"type\":\"uint256\"}],\"name\":\"debtIdBranch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeLoanIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"debts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeLoanIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"firInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_firInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"fixedInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fixedInterestRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"getCollateralDebtId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"getCollateralNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"getDebtTerms\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractTerms\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_borrowerSignature\",\"type\":\"bytes\"}],\"name\":\"initLoanContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractTerms\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_borrowerSignature\",\"type\":\"bytes\"}],\"name\":\"initLoanContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"isFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_isFixed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"lenderRoyalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lenderRoyalties\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"loanClose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanClose\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"loanCommital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanCommital\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"loanDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"loanLastChecked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"loanStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"loanState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanState\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanTreasurer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRefinances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"mintReplica\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedTerms\",\"type\":\"bytes32\"}],\"name\":\"reinstateTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedTerms\",\"type\":\"bytes32\"}],\"name\":\"revokeTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anzaTokenAddress\",\"type\":\"address\"}],\"name\":\"setAnzaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralVaultAddress\",\"type\":\"address\"}],\"name\":\"setCollateralVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanTreasurerAddress\",\"type\":\"address\"}],\"name\":\"setLoanTreasurer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRefinances\",\"type\":\"uint256\"}],\"name\":\"setMaxRefinances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"totalFirIntervals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"updateLoanState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"verifyLoanActive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanContract.sol\":\"LoanContract\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LoanCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./domain/LoanContractErrorCodes.sol\\\";\\nimport \\\"./domain/LoanContractFIRIntervals.sol\\\";\\nimport \\\"./domain/LoanContractNumbers.sol\\\";\\nimport \\\"./domain/LoanContractTermMaps.sol\\\";\\nimport \\\"./domain/LoanContractStates.sol\\\";\\n\\nimport \\\"./interfaces/ILoanCodec.sol\\\";\\nimport {LibLoanContractInterest as Interest} from \\\"./libraries/LibLoanContract.sol\\\";\\n\\nabstract contract LoanCodec is ILoanCodec {\\n    event LoanStateChanged(\\n        uint256 indexed debtId,\\n        uint8 indexed newLoanState,\\n        uint8 indexed oldLoanState\\n    );\\n\\n    /**\\n     *  > 004 - [0..3]     `loanState`\\n     *  > 004 - [4..7]     `firInterval`\\n     *  > 008 - [8..15]    `fixedInterestRate`\\n     *  > 032 - [16..47]   `loanStart`\\n     *  > 032 - [48..79]   `loanDuration`\\n     *  > 160 - [80..239]  unused space\\n     *  > 008 - [240..247] `lenderRoyalties`\\n     *  > 008 - [248..255] `activeLoanIndex`\\n     */\\n    mapping(uint256 => bytes32) private __packedDebtTerms;\\n\\n    function getDebtTerms(uint256 _debtId) external view returns (bytes32) {\\n        return __packedDebtTerms[_debtId];\\n    }\\n\\n    function loanState(\\n        uint256 _debtId\\n    ) public view returns (uint256 _loanState) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint8 __loanState;\\n\\n        assembly {\\n            __loanState := and(_contractTerms, _LOAN_STATE_MAP_)\\n        }\\n\\n        unchecked {\\n            _loanState = __loanState;\\n        }\\n    }\\n\\n    function firInterval(\\n        uint256 _debtId\\n    ) public view returns (uint256 _firInterval) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint8 __firInterval;\\n\\n        assembly {\\n            __firInterval := shr(\\n                _FIR_INTERVAL_POS_,\\n                and(_contractTerms, _FIR_INTERVAL_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _firInterval = __firInterval;\\n        }\\n    }\\n\\n    function fixedInterestRate(\\n        uint256 _debtId\\n    ) public view returns (uint256 _fixedInterestRate) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        bytes32 __fixedInterestRate;\\n\\n        assembly {\\n            __fixedInterestRate := shr(\\n                _FIR_POS_,\\n                and(_contractTerms, _FIR_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _fixedInterestRate = uint256(__fixedInterestRate);\\n        }\\n    }\\n\\n    function isFixed(uint256 _debtId) public view returns (uint256 _isFixed) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint32 __isFixed;\\n\\n        assembly {\\n            __isFixed := shr(\\n                _IS_FIXED_POS_,\\n                and(_contractTerms, _IS_FIXED_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _isFixed = __isFixed;\\n        }\\n    }\\n\\n    function loanLastChecked(uint256 _debtId) external view returns (uint256) {\\n        return loanStart(_debtId);\\n    }\\n\\n    function loanStart(\\n        uint256 _debtId\\n    ) public view returns (uint256 _loanStart) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint32 __loanStart;\\n\\n        assembly {\\n            __loanStart := shr(\\n                _LOAN_START_POS_,\\n                and(_contractTerms, _LOAN_START_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanStart = __loanStart;\\n        }\\n    }\\n\\n    function loanDuration(\\n        uint256 _debtId\\n    ) public view returns (uint256 _loanDuration) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint32 __loanDuration;\\n\\n        assembly {\\n            __loanDuration := shr(\\n                _LOAN_DURATION_POS_,\\n                and(_contractTerms, _LOAN_DURATION_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanDuration = __loanDuration;\\n        }\\n    }\\n\\n    function loanCommital(\\n        uint256 _debtId\\n    ) public view returns (uint256 _loanCommital) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint32 __loanCommital;\\n\\n        assembly {\\n            __loanCommital := shr(\\n                _COMMITAL_POS_,\\n                and(_contractTerms, _COMMITAL_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanCommital = __loanCommital;\\n        }\\n    }\\n\\n    function loanClose(\\n        uint256 _debtId\\n    ) public view returns (uint256 _loanClose) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint32 __loanClose;\\n\\n        assembly {\\n            __loanClose := add(\\n                shr(_LOAN_START_POS_, and(_contractTerms, _LOAN_START_MAP_)),\\n                shr(\\n                    _LOAN_DURATION_POS_,\\n                    and(_contractTerms, _LOAN_DURATION_MAP_)\\n                )\\n            )\\n        }\\n\\n        unchecked {\\n            _loanClose = __loanClose;\\n        }\\n    }\\n\\n    function lenderRoyalties(\\n        uint256 _debtId\\n    ) public view returns (uint256 _lenderRoyalties) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n\\n        assembly {\\n            _lenderRoyalties := shr(\\n                _LENDER_ROYALTIES_POS_,\\n                and(_contractTerms, _LENDER_ROYALTIES_MAP_)\\n            )\\n        }\\n    }\\n\\n    function activeLoanCount(\\n        uint256 _debtId\\n    ) public view returns (uint256 _activeLoanCount) {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint8 __activeLoanCount;\\n\\n        assembly {\\n            __activeLoanCount := shr(\\n                _LOAN_COUNT_POS_,\\n                and(_contractTerms, _LOAN_COUNT_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _activeLoanCount = __activeLoanCount;\\n        }\\n    }\\n\\n    function totalFirIntervals(\\n        uint256 _debtId,\\n        uint256 _seconds\\n    ) public view returns (uint256) {\\n        uint256 _firInterval = firInterval(_debtId);\\n        uint256 _duration = loanDuration(_debtId);\\n        _seconds = _seconds <= _duration ? _seconds : _duration;\\n\\n        return _getTotalFirIntervals(_firInterval, _seconds);\\n    }\\n\\n    function _validateLoanTerms(\\n        bytes32 _contractTerms,\\n        uint32 _loanStart,\\n        uint256 _principal\\n    ) internal pure {\\n        uint8 _lenderRoyalties;\\n        uint32 _termsExpiry;\\n        uint32 _duration;\\n        uint32 _gracePeriod;\\n        uint8 _fixedInterestRate;\\n        uint8 _firInterval;\\n\\n        assembly {\\n            // Get packed lender royalties\\n            mstore(0x1f, _contractTerms)\\n            _lenderRoyalties := mload(0)\\n\\n            // Get packed terms expiry\\n            mstore(0x1b, _contractTerms)\\n            _termsExpiry := mload(0)\\n\\n            // Get packed duration\\n            mstore(0x17, _contractTerms)\\n            _duration := mload(0)\\n\\n            // Get packed grace period\\n            mstore(0x13, _contractTerms)\\n            _gracePeriod := mload(0)\\n\\n            // Get fixed interest rate\\n            mstore(0x01, _contractTerms)\\n            _fixedInterestRate := mload(0)\\n\\n            // Get fir interval\\n            mstore(0x00, _contractTerms)\\n            _firInterval := mload(0)\\n        }\\n\\n        unchecked {\\n            // Check lender royalties\\n            if (_lenderRoyalties > 100) {\\n                revert InvalidLoanParameter(_LENDER_ROYALTIES_ERROR_ID_);\\n            }\\n\\n            // Check terms expiry\\n            if (_termsExpiry < _SECONDS_PER_24_MINUTES_RATIO_SCALED_) {\\n                revert InvalidLoanParameter(_TIME_EXPIRY_ERROR_ID_);\\n            }\\n\\n            // Check duration and grace period\\n            if (\\n                uint256(_duration) == 0 ||\\n                (uint256(_loanStart) +\\n                    uint256(_duration) +\\n                    uint256(_gracePeriod)) >\\n                type(uint32).max\\n            ) {\\n                revert InvalidLoanParameter(_DURATION_ERROR_ID_);\\n            }\\n\\n            // Check principal\\n            if (_principal == 0)\\n                revert InvalidLoanParameter(_PRINCIPAL_ERROR_ID_);\\n\\n            // No fixed interest rate check necessary\\n\\n            // Check FIR interval\\n            if (_firInterval > 15)\\n                revert InvalidLoanParameter(_FIR_INTERVAL_ERROR_ID_);\\n\\n            // Check max compounded debt\\n            try\\n                Interest.compoundWithTopoff(\\n                    _principal,\\n                    _fixedInterestRate,\\n                    _getTotalFirIntervals(_firInterval, _duration)\\n                )\\n            returns (uint256) {} catch {\\n                if (_firInterval != 0)\\n                    revert InvalidLoanParameter(_FIXED_INTEREST_RATE_ERROR_ID_);\\n            }\\n        }\\n    }\\n\\n    function _getTotalFirIntervals(\\n        uint256 _firInterval,\\n        uint256 _seconds\\n    ) internal pure returns (uint256) {\\n        // _SECONDLY_\\n        if (_firInterval == 0) {\\n            return _seconds;\\n        }\\n        // _MINUTELY_\\n        else if (_firInterval == 1) {\\n            return _seconds / _MINUTELY_MULTIPLIER_;\\n        }\\n        // _HOURLY_\\n        else if (_firInterval == 2) {\\n            return _seconds / _HOURLY_MULTIPLIER_;\\n        }\\n        // _DAILY_\\n        else if (_firInterval == 3) {\\n            return _seconds / _DAILY_MULTIPLIER_;\\n        }\\n        // _WEEKLY_\\n        else if (_firInterval == 4) {\\n            return _seconds / _WEEKLY_MULTIPLIER_;\\n        }\\n        // _2_WEEKLY_\\n        else if (_firInterval == 5) {\\n            return _seconds / _2_WEEKLY_MULTIPLIER_;\\n        }\\n        // _4_WEEKLY_\\n        else if (_firInterval == 6) {\\n            return _seconds / _4_WEEKLY_MULTIPLIER_;\\n        }\\n        // _6_WEEKLY_\\n        else if (_firInterval == 7) {\\n            return _seconds / _6_WEEKLY_MULTIPLIER_;\\n        }\\n        // _8_WEEKLY_\\n        else if (_firInterval == 8) {\\n            return _seconds / _8_WEEKLY_MULTIPLIER_;\\n        }\\n        // _360_DAILY_\\n        else if (_firInterval == 14) {\\n            return _seconds / _360_DAILY_MULTIPLIER_;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function _setLoanAgreement(\\n        uint32 _now,\\n        uint256 _debtId,\\n        uint256 _activeLoanIndex,\\n        bytes32 _contractTerms\\n    ) internal virtual {\\n        bytes32 _loanAgreement;\\n\\n        assembly {\\n            // Get packed fixed interest rate\\n            mstore(0x01, _contractTerms)\\n            let _fixedInterestRate := mload(0)\\n\\n            // Get packed is direct and commital\\n            // Need to mask other packed terms for gt\\n            // comparison below.\\n            mstore(0x02, _contractTerms)\\n            let _isDirect_Commital := and(mload(0), 0xFF)\\n\\n            // Get packed grace period\\n            mstore(0x13, _contractTerms)\\n            let _gracePeriod := mload(0)\\n\\n            // Get packed duration\\n            mstore(0x17, _contractTerms)\\n            let _duration := mload(0)\\n\\n            // Get packed lender royalties\\n            mstore(0x1f, _contractTerms)\\n            let _lenderTerms := mload(0)\\n\\n            // Shif left to make space for loan state\\n            mstore(0x20, shl(4, _contractTerms))\\n\\n            // Pack loan state (uint4)\\n            switch _gracePeriod\\n            case 0 {\\n                mstore(\\n                    0x20,\\n                    xor(\\n                        and(_LOAN_STATE_MASK_, mload(0x20)),\\n                        and(_LOAN_STATE_MAP_, _ACTIVE_STATE_)\\n                    )\\n                )\\n            }\\n            default {\\n                mstore(\\n                    0x20,\\n                    xor(\\n                        and(_LOAN_STATE_MASK_, mload(0x20)),\\n                        and(_LOAN_STATE_MAP_, _ACTIVE_GRACE_STATE_)\\n                    )\\n                )\\n            }\\n\\n            // Pack fir interval (uint4)\\n            // Already performed and not needed.\\n\\n            // Pack fixed interest rate (uint8)\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_FIR_MASK_, mload(0x20)),\\n                    and(_FIR_MAP_, shl(_FIR_POS_, _fixedInterestRate))\\n                )\\n            )\\n\\n            // Pack loan start time (uint32)\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LOAN_START_MASK_, mload(0x20)),\\n                    and(\\n                        _LOAN_START_MAP_,\\n                        shl(_LOAN_START_POS_, add(_now, _gracePeriod))\\n                    )\\n                )\\n            )\\n\\n            // Pack loan duration time (uint32)\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LOAN_DURATION_MASK_, mload(0x20)),\\n                    and(\\n                        _LOAN_DURATION_MAP_,\\n                        shl(_LOAN_DURATION_POS_, _duration)\\n                    )\\n                )\\n            )\\n\\n            switch gt(_isDirect_Commital, 0x64)\\n            case true {\\n                // Pack is direct (uint4) - true\\n                mstore(\\n                    0x20,\\n                    xor(\\n                        and(_IS_FIXED_MASK_, mload(0x20)),\\n                        and(_IS_FIXED_MAP_, shl(_IS_FIXED_POS_, 0x01))\\n                    )\\n                )\\n\\n                // Pack commital (uint8)\\n                mstore(\\n                    0x20,\\n                    xor(\\n                        and(_COMMITAL_MASK_, mload(0x20)),\\n                        and(\\n                            _COMMITAL_MAP_,\\n                            shl(_COMMITAL_POS_, sub(_isDirect_Commital, 0x65))\\n                        )\\n                    )\\n                )\\n            }\\n            case false {\\n                // Pack is direct (uint4) - false\\n                mstore(\\n                    0x20,\\n                    xor(\\n                        and(_IS_FIXED_MASK_, mload(0x20)),\\n                        and(_IS_FIXED_MAP_, shl(_IS_FIXED_POS_, 0x00))\\n                    )\\n                )\\n\\n                // Pack commital (uint8)\\n                mstore(\\n                    0x20,\\n                    xor(\\n                        and(_COMMITAL_MASK_, mload(0x20)),\\n                        and(\\n                            _COMMITAL_MAP_,\\n                            shl(_COMMITAL_POS_, _isDirect_Commital)\\n                        )\\n                    )\\n                )\\n            }\\n\\n            // Pack lender royalties (uint8)\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LENDER_ROYALTIES_MASK_, mload(0x20)),\\n                    and(\\n                        _LENDER_ROYALTIES_MAP_,\\n                        shl(_LENDER_ROYALTIES_POS_, _lenderTerms)\\n                    )\\n                )\\n            )\\n\\n            // Pack loan count (uint8)\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LOAN_COUNT_MASK_, mload(0x20)),\\n                    and(\\n                        _LOAN_COUNT_MAP_,\\n                        shl(_LOAN_COUNT_POS_, _activeLoanIndex)\\n                    )\\n                )\\n            )\\n\\n            _loanAgreement := and(_CLEANUP_MASK_, mload(0x20))\\n        }\\n\\n        __packedDebtTerms[_debtId] = _loanAgreement;\\n    }\\n\\n    function _setLoanState(uint256 _debtId, uint8 _newLoanState) internal {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n        uint8 _oldLoanState;\\n\\n        assembly {\\n            _oldLoanState := and(_LOAN_STATE_MAP_, _contractTerms)\\n\\n            // If the loan states are the same, do nothing\\n            if eq(_oldLoanState, _newLoanState) {\\n                revert(0, 0)\\n            }\\n\\n            mstore(0x20, _contractTerms)\\n\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LOAN_STATE_MASK_, mload(0x20)),\\n                    and(_LOAN_STATE_MAP_, _newLoanState)\\n                )\\n            )\\n\\n            _contractTerms := mload(0x20)\\n        }\\n\\n        __packedDebtTerms[_debtId] = _contractTerms;\\n\\n        emit LoanStateChanged(_debtId, _newLoanState, _oldLoanState);\\n    }\\n\\n    function _updateLoanTimes(uint256 _debtId) internal {\\n        bytes32 _contractTerms = __packedDebtTerms[_debtId];\\n\\n        assembly {\\n            let _loanState := and(_LOAN_STATE_MAP_, _contractTerms)\\n\\n            // If loan state is beyond active, do nothing\\n            if gt(_loanState, _ACTIVE_STATE_) {\\n                revert(0, 0)\\n            }\\n\\n            mstore(0x20, _contractTerms)\\n\\n            // Store loan close time\\n            let _loanClose := add(\\n                shr(16, and(_LOAN_START_MAP_, _contractTerms)),\\n                shr(48, and(_LOAN_DURATION_MAP_, _contractTerms))\\n            )\\n\\n            let _now := timestamp()\\n            if gt(_now, _loanClose) {\\n                _now := _loanClose\\n            }\\n\\n            // Update loan last checked. This could be a transition from\\n            // loan start to loan last checked if it is the first time this\\n            // condition is executed.\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LOAN_START_MASK_, mload(0x20)),\\n                    and(_LOAN_START_MAP_, shl(16, _now))\\n                )\\n            )\\n\\n            // Update loan duration\\n            mstore(\\n                0x20,\\n                xor(\\n                    and(_LOAN_DURATION_MASK_, mload(0x20)),\\n                    and(_LOAN_DURATION_MAP_, shl(48, sub(_loanClose, _now)))\\n                )\\n            )\\n\\n            _contractTerms := mload(0x20)\\n        }\\n\\n        __packedDebtTerms[_debtId] = _contractTerms;\\n    }\\n}\\n\",\"keccak256\":\"0x06a65e90d6b313447a4274a770b22323a24a687f040211829512c33db122b0ff\",\"license\":\"MIT\"},\"contracts/LoanContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./LoanManager.sol\\\";\\nimport \\\"./utils/TypeUtils.sol\\\";\\nimport \\\"./utils/LoanSigningUtils.sol\\\";\\nimport \\\"./interfaces/ILoanContract.sol\\\";\\nimport \\\"./interfaces/ICollateralVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ncontract LoanContract is\\n    ILoanContract,\\n    LoanManager,\\n    LoanSigningUtils,\\n    TypeUtils\\n{\\n    // Count of total inactive/active debts\\n    uint256 public totalDebts;\\n\\n    // Mapping from collateral to debt ID\\n    mapping(address _collateralAddress => mapping(uint256 _collateralId => Debt))\\n        public debts;\\n    mapping(uint256 _childDebtId => Debt _parentDebtId) public debtIdBranch;\\n\\n    constructor() LoanManager() {}\\n\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view override(AccessControl) returns (bool) {\\n        return\\n            _interfaceId == 0xb7c3c5ea || // ILoanContract\\n            _interfaceId == 0x4a23979d || // ILoanManager\\n            _interfaceId == 0xf83e032d || // ILoanCodec\\n            AccessControl.supportsInterface(_interfaceId);\\n    }\\n\\n    /*\\n     * This should report back only the total debt tokens, not the ALC NFTs.\\n     * TODO: Test\\n     */\\n    function debtBalanceOf(uint256 _debtId) public view returns (uint256) {\\n        return _anzaToken.totalSupply(_debtId * 2);\\n    }\\n\\n    function getCollateralNonce(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) public view returns (uint256) {\\n        return debts[_collateralAddress][_collateralId].collateralNonce + 1;\\n    }\\n\\n    function getCollateralDebtId(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) public view returns (uint256) {\\n        return debts[_collateralAddress][_collateralId].debtId;\\n    }\\n\\n    /*\\n     * Input _contractTerms:\\n     *  > 004 - [0..3]     `firInterval`\\n     *  > 004 - [4..11]    `fixedInterestRate`\\n     *  > 008 - [12..19]   `isFixed` and `commital`\\n     *  > 008 - [20..27]   `loanCurrency`\\n     *  > 032 - [148..179] `gracePeriod`\\n     *  > 032 - [180..211] `duration`\\n     *  > 032 - [212..243] `termsExpiry`\\n     *  > 008 - [244..255] `lenderRoyalties`\\n     */\\n    function initLoanContract(\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        bytes calldata _borrowerSignature\\n    ) external payable {\\n        // Validate loan terms\\n        uint32 _now = _toUint32(block.timestamp);\\n        uint256 _principal = msg.value;\\n        _validateLoanTerms(_contractTerms, _now, _principal);\\n\\n        // Verify borrower participation\\n        IERC721Metadata _collateralToken = IERC721Metadata(_collateralAddress);\\n        address _borrower = _collateralToken.ownerOf(_collateralId);\\n\\n        Debt storage _debt = debts[_collateralAddress][_collateralId];\\n\\n        // Increment loan field\\n        _debt.debtId = ++totalDebts;\\n\\n        if (\\n            (_borrower !=\\n                _recoverSigner(\\n                    _principal,\\n                    _contractTerms,\\n                    _collateralAddress,\\n                    _collateralId,\\n                    ++_debt.collateralNonce,\\n                    _borrowerSignature\\n                ) ||\\n                (_borrower == msg.sender))\\n        ) revert InvalidParticipant();\\n\\n        // Add debt to database\\n        __setLoanAgreement(_now, 0, _contractTerms);\\n\\n        // The collateral ID and address will be mapped within\\n        // the loan collateral vault to the debt ID.\\n        _collateralToken.safeTransferFrom(\\n            _borrower,\\n            _collateralVault,\\n            _collateralId,\\n            abi.encodePacked(totalDebts)\\n        );\\n\\n        // Transfer funds to borrower's account in treasurey\\n        (bool _success, ) = _loanTreasurer.call{value: _principal}(\\n            abi.encodeWithSignature(\\\"depositFunds(address)\\\", _borrower)\\n        );\\n        if (!_success) revert FailedFundsTransfer();\\n\\n        // Mint debt ALC debt tokens for lender\\n        _anzaToken.mint(\\n            msg.sender,\\n            totalDebts * 2,\\n            _principal,\\n            _collateralToken.tokenURI(_collateralId),\\n            abi.encodePacked(_borrower, totalDebts)\\n        );\\n\\n        // Emit initialization event\\n        emit LoanContractInitialized(\\n            _collateralAddress,\\n            _collateralId,\\n            totalDebts,\\n            0\\n        );\\n    }\\n\\n    /*\\n     * Input _contractTerms:\\n     *  > 004 - [0..3]     `firInterval`\\n     *  > 004 - [4..11]    `fixedInterestRate`\\n     *  > 008 - [12..19]   unused space\\n     *  > 128 - [20..147]  `principal`\\n     *  > 032 - [148..179] `gracePeriod`\\n     *  > 032 - [180..211] `duration`\\n     *  > 032 - [212..243] `termsExpiry`\\n     *  > 008 - [244..255] `lenderRoyalties`\\n     */\\n    function initLoanContract(\\n        bytes32 _contractTerms,\\n        uint256 _debtId,\\n        bytes calldata _borrowerSignature\\n    ) external payable {\\n        // Verify existing loan is in good standing\\n        if (checkLoanDefault(_debtId)) revert InvalidCollateral();\\n\\n        // Validate loan terms\\n        uint32 _now = _toUint32(block.timestamp);\\n        uint256 _principal = msg.value;\\n        _validateLoanTerms(_contractTerms, _now, _principal);\\n\\n        ICollateralVault _loanCollateralVault = ICollateralVault(\\n            _collateralVault\\n        );\\n        ICollateralVault.Collateral memory _collateral = _loanCollateralVault\\n            .getCollateral(_debtId);\\n\\n        Debt storage _debt = debts[_collateral.collateralAddress][\\n            _collateral.collateralId\\n        ];\\n\\n        // Map the child loan to the parent\\n        debtIdBranch[_debt.debtId] = _debt;\\n\\n        // Increment child loan fields\\n        _debt.debtId = ++totalDebts;\\n        ++_debt.activeLoanIndex;\\n\\n        // Verify borrower participation\\n        address _borrower = _recoverSigner(\\n            _principal,\\n            _contractTerms,\\n            _collateral.collateralAddress,\\n            _collateral.collateralId,\\n            ++_debt.collateralNonce,\\n            _borrowerSignature\\n        );\\n\\n        // During initial loan submission (i.e. activeLoanIndex 0), in the\\n        // AnzaToken contract, the borrower is given admin role specific to\\n        // the debt ID. This is then used for borrower verification.\\n        if (\\n            !_anzaToken.checkBorrowerOf(_borrower, _debtId) ||\\n            (_borrower == msg.sender)\\n        ) revert InvalidParticipant();\\n\\n        __setLoanAgreement(_now, _debt.activeLoanIndex, _contractTerms);\\n\\n        // Store collateral-debtId mapping in vault\\n        _loanCollateralVault.setCollateral(\\n            _collateral.collateralAddress,\\n            _collateral.collateralId,\\n            totalDebts\\n        );\\n\\n        // Replace or reduce previous debt. Any excess funds will\\n        // be available for withdrawal in the treasurey.\\n        uint256 _balance = debtBalanceOf(_debtId);\\n        (bool _success, ) = _loanTreasurer.call{\\n            value: _principal >= _balance ? _balance : _principal\\n        }(\\n            abi.encodeWithSignature(\\n                \\\"sponsorPayment(address,uint256)\\\",\\n                _borrower,\\n                _debtId\\n            )\\n        );\\n        if (!_success) revert FailedFundsTransfer();\\n\\n        // Mint debt ALC debt tokens for lender.\\n        _anzaToken.mint(\\n            msg.sender,\\n            totalDebts * 2,\\n            _principal,\\n            IERC721Metadata(_collateral.collateralAddress).tokenURI(\\n                _collateral.collateralId\\n            ),\\n            abi.encodePacked(_borrower, totalDebts)\\n        );\\n\\n        // Emit initialization event\\n        emit LoanContractInitialized(\\n            _collateral.collateralAddress,\\n            _collateral.collateralId,\\n            totalDebts,\\n            _debt.activeLoanIndex\\n        );\\n\\n        // Setup for next debt ID\\n        totalDebts += 1;\\n    }\\n\\n    function mintReplica(uint256 _debtId) external {\\n        // AnzaToken.sol manages replica mint access control.\\n        address _borrower = msg.sender;\\n\\n        _anzaToken.mint(\\n            _borrower,\\n            (_debtId * 2) + 1,\\n            1,\\n            \\\"\\\",\\n            abi.encodePacked(_borrower, _debtId)\\n        );\\n    }\\n\\n    function __setLoanAgreement(\\n        uint32 _now,\\n        uint256 _activeLoanIndex,\\n        bytes32 _contractTerms\\n    ) private {\\n        if (_activeLoanIndex > maxRefinances) revert ExceededRefinanceLimit();\\n\\n        _setLoanAgreement(_now, totalDebts, _activeLoanIndex, _contractTerms);\\n    }\\n}\\n\",\"keccak256\":\"0x7cc363e4bea7f449d5db690a83f9842dcba168d63608f0a8141222a3f536a617\",\"license\":\"MIT\"},\"contracts/LoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/ILoanManager.sol\\\";\\nimport \\\"./LoanCodec.sol\\\";\\nimport \\\"./access/ManagerAccessController.sol\\\";\\n\\ncontract LoanManager is ILoanManager, LoanCodec, ManagerAccessController {\\n    // Max number of loan refinances (default is unlimited)\\n    uint256 public maxRefinances = 2008;\\n\\n    mapping(address => mapping(bytes32 => bool)) private __revokedTerms;\\n\\n    constructor() ManagerAccessController() {}\\n\\n    function setMaxRefinances(\\n        uint256 _maxRefinances\\n    ) external onlyRole(_ADMIN_) {\\n        maxRefinances = _maxRefinances <= 255 ? _maxRefinances : 2008;\\n    }\\n\\n    /*\\n     * @dev Updates loan state.\\n     */\\n    function updateLoanState(uint256 _debtId) external onlyRole(_TREASURER_) {\\n        if (!checkLoanActive(_debtId)) {\\n            console.log(\\\"Inactive loan: %s\\\", _debtId);\\n            revert InactiveLoanState();\\n        }\\n\\n        // Loan defaulted\\n        if (checkLoanExpired(_debtId)) {\\n            console.log(\\\"Defaulted loan: %s\\\", _debtId);\\n            _updateLoanTimes(_debtId);\\n            _setLoanState(_debtId, _DEFAULT_STATE_);\\n        }\\n        // Loan fully paid off\\n        else if (_anzaToken.totalSupply(_debtId * 2) <= 0) {\\n            console.log(\\\"Paid loan: %s\\\", _debtId);\\n            _setLoanState(_debtId, _PAID_STATE_);\\n        }\\n        // Loan active and interest compounding\\n        else if (loanState(_debtId) == _ACTIVE_STATE_) {\\n            console.log(\\\"Active loan: %s\\\", _debtId);\\n            _updateLoanTimes(_debtId);\\n        }\\n        // Loan no longer in grace period\\n        else if (!_checkGracePeriod(_debtId)) {\\n            console.log(\\\"Grace period expired: %s\\\", _debtId);\\n            _setLoanState(_debtId, _ACTIVE_STATE_);\\n            _updateLoanTimes(_debtId);\\n        }\\n    }\\n\\n    function verifyLoanActive(uint256 _debtId) public view {\\n        if (!checkLoanActive(_debtId)) revert InactiveLoanState();\\n    }\\n\\n    function checkTermsRevoked(\\n        address _borrower,\\n        bytes32 _hashedTerms\\n    ) public view returns (bool) {\\n        return __revokedTerms[_borrower][_hashedTerms];\\n    }\\n\\n    function checkLoanActive(uint256 _debtId) public view returns (bool) {\\n        return\\n            loanState(_debtId) >= _ACTIVE_GRACE_STATE_ &&\\n            loanState(_debtId) <= _ACTIVE_STATE_;\\n    }\\n\\n    function checkLoanDefault(uint256 _debtId) public view returns (bool) {\\n        return\\n            loanState(_debtId) >= _DEFAULT_STATE_ &&\\n            loanState(_debtId) <= _AWARDED_STATE_;\\n    }\\n\\n    function checkLoanExpired(uint256 _debtId) public view returns (bool) {\\n        return\\n            _anzaToken.totalSupply(_debtId * 2) > 0 &&\\n            loanClose(_debtId) <= block.timestamp;\\n    }\\n\\n    function revokeTerms(bytes32 _hashedTerms) public {\\n        __revokedTerms[msg.sender][_hashedTerms] = true;\\n\\n        emit LoanTermsRevoked(msg.sender, _hashedTerms);\\n    }\\n\\n    function reinstateTerms(bytes32 _hashedTerms) public {\\n        __revokedTerms[msg.sender][_hashedTerms] = false;\\n\\n        emit LoanTermsReinstated(msg.sender, _hashedTerms);\\n    }\\n\\n    function _checkGracePeriod(uint256 _debtId) internal view returns (bool) {\\n        return loanStart(_debtId) > block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x30d51487b3aba8693179b7d150723733714280c7b85df7c8a8108ae6d47512ae\",\"license\":\"MIT\"},\"contracts/abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64, \\\"fail\\\");\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                        y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(\\n                        absoluteResult <=\\n                            0x8000000000000000000000000000000000000000000000000000000000000000\\n                    );\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(\\n                        absoluteResult <=\\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                    );\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) *\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(\\n                hi <=\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n                        lo\\n            );\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(\\n                m <\\n                    0x4000000000000000000000000000000000000000000000000000000000000000\\n            );\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = (absX * absX) >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return\\n                int128(\\n                    int256(\\n                        (uint256(int256(log_2(x))) *\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0)\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0)\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0)\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0)\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0)\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0)\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0)\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0)\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0)\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0)\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0)\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0)\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0)\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0)\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0)\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0)\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0)\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0)\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0)\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0)\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0)\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0)\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0)\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0)\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0)\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0)\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0)\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0)\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0)\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0)\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0)\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0)\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0)\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0)\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0)\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0)\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return\\n                exp_2(\\n                    int128(\\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                result += xh == hi >> 128 ? xl / y : 1;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) return 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x4) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea2ccc9d587551e1c92fe89efcca4e5376395bc43dd098865075f18fa6f09bd\",\"license\":\"BSD-4-Clause\"},\"contracts/access/ManagerAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../domain/LoanContractRoles.sol\\\";\\n\\nimport \\\"../interfaces/IManagerAccessController.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ManagerAccessController is IManagerAccessController, AccessControl {\\n    address internal _collateralVault;\\n    address internal _loanTreasurer;\\n\\n    IAnzaToken internal _anzaToken;\\n\\n    constructor() {\\n        _setRoleAdmin(_ADMIN_, _ADMIN_);\\n        _setRoleAdmin(_TREASURER_, _ADMIN_);\\n\\n        _grantRole(_ADMIN_, msg.sender);\\n    }\\n\\n    function anzaToken() external view returns (address) {\\n        return address(_anzaToken);\\n    }\\n\\n    function loanTreasurer() external view returns (address) {\\n        return _loanTreasurer;\\n    }\\n\\n    function collateralVault() external view returns (address) {\\n        return _collateralVault;\\n    }\\n\\n    function setAnzaToken(\\n        address _anzaTokenAddress\\n    ) external onlyRole(_ADMIN_) {\\n        _anzaToken = IAnzaToken(_anzaTokenAddress);\\n    }\\n\\n    function setLoanTreasurer(\\n        address _loanTreasurerAddress\\n    ) external onlyRole(_ADMIN_) {\\n        __setLoanTreasurer(_loanTreasurerAddress);\\n    }\\n\\n    function setCollateralVault(\\n        address _collateralVaultAddress\\n    ) external onlyRole(_ADMIN_) {\\n        _collateralVault = _collateralVaultAddress;\\n    }\\n\\n    function _grantRole(\\n        bytes32 _role,\\n        address _account\\n    ) internal virtual override {\\n        (_role == _TREASURER_)\\n            ? __setLoanTreasurer(_account)\\n            : super._grantRole(_role, _account);\\n    }\\n\\n    function __setLoanTreasurer(address _loanTreasurerAddress) private {\\n        _revokeRole(_TREASURER_, _loanTreasurer);\\n        super._grantRole(_TREASURER_, _loanTreasurerAddress);\\n\\n        _loanTreasurer = _loanTreasurerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x442d765cccca80ee4a03dab83b5c7ad2947a5ca36d179b3d39ceb7f8c8cb0b02\",\"license\":\"MIT\"},\"contracts/domain/LoanContractErrorCodes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *           Loan Term Standard Errors              *\\n * ------------------------------------------------ */\\nbytes4 constant _LOAN_STATE_ERROR_ID_ = 0xdacce9d3;\\nbytes4 constant _FIR_INTERVAL_ERROR_ID_ = 0xa13e8948;\\nbytes4 constant _DURATION_ERROR_ID_ = 0xfcbf8511;\\nbytes4 constant _PRINCIPAL_ERROR_ID_ = 0x6a901435;\\nbytes4 constant _FIXED_INTEREST_RATE_ERROR_ID_ = 0x8fe03ac3;\\nbytes4 constant _GRACE_PERIOD_ERROR_ID_ = 0xb677e65e;\\nbytes4 constant _TIME_EXPIRY_ERROR_ID_ = 0x67b21a5c;\\nbytes4 constant _LENDER_ROYALTIES_ERROR_ID_ = 0xecc752dd;\\n\",\"keccak256\":\"0xbce9c5dc9ea265767ce8a45d5b4d590d14e142f5eb6813b7cf1a14b900abb6dc\",\"license\":\"MIT\"},\"contracts/domain/LoanContractFIRIntervals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *       Fixed Interest Rate (FIR) Intervals        *\\n * ------------------------------------------------ */\\n//  Need to validate duration > FIR interval\\nuint8 constant _SECONDLY_ = 0;\\nuint8 constant _MINUTELY_ = 1;\\nuint8 constant _HOURLY_ = 2;\\nuint8 constant _DAILY_ = 3;\\nuint8 constant _WEEKLY_ = 4;\\nuint8 constant _2_WEEKLY_ = 5;\\nuint8 constant _4_WEEKLY_ = 6;\\nuint8 constant _6_WEEKLY_ = 7;\\nuint8 constant _8_WEEKLY_ = 8;\\nuint8 constant _MONTHLY_ = 9;\\nuint8 constant _2_MONTHLY_ = 10;\\nuint8 constant _3_MONTHLY_ = 11;\\nuint8 constant _4_MONTHLY_ = 12;\\nuint8 constant _6_MONTHLY_ = 13;\\nuint8 constant _360_DAILY_ = 14;\\nuint8 constant _ANNUALLY_ = 15;\\n\\n/* ------------------------------------------------ *\\n *               FIR Interval Multipliers           *\\n * ------------------------------------------------ */\\nuint256 constant _SECONDLY_MULTIPLIER_ = 1;\\nuint256 constant _MINUTELY_MULTIPLIER_ = 60;\\nuint256 constant _HOURLY_MULTIPLIER_ = 60 * 60;\\nuint256 constant _DAILY_MULTIPLIER_ = 60 * 60 * 24;\\nuint256 constant _WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7;\\nuint256 constant _2_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 2;\\nuint256 constant _4_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 4;\\nuint256 constant _6_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 6;\\nuint256 constant _8_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 8;\\nuint256 constant _360_DAILY_MULTIPLIER_ = 60 * 60 * 24 * 360;\\n\",\"keccak256\":\"0xff26ca73af5ce6b9cc6014706d189c58007f73731a32a59580fd9d1e02cb8027\",\"license\":\"MIT\"},\"contracts/domain/LoanContractNumbers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *                 Contract Numbers                 *\\n * ------------------------------------------------ */\\nuint256 constant _SECONDS_PER_24_MINUTES_RATIO_SCALED_ = 1440;\\nuint256 constant _UINT32_MAX_ = 4294967295;\\n\",\"keccak256\":\"0x8fb831fd90293e11e3361fb6147476b111c2b588dce2cbbb50b746a23b309549\",\"license\":\"MIT\"},\"contracts/domain/LoanContractRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *              Loan Contract Roles                 *\\n * ------------------------------------------------ */\\nbytes32 constant _ADMIN_ = keccak256(\\\"_ADMIN_\\\");\\nbytes32 constant _LOAN_CONTRACT_ = keccak256(\\\"_LOAN_CONTRACT_\\\");\\nbytes32 constant _TREASURER_ = keccak256(\\\"_TREASURER_\\\");\\nbytes32 constant _COLLECTOR_ = keccak256(\\\"_COLLECTOR_\\\");\\nbytes32 constant _DEBT_STOREFRONT_ = keccak256(\\\"_DEBT_STOREFRONT_\\\");\\n\\n\",\"keccak256\":\"0xcc4c0a9996c576747d5a3a42503130e2b8760de3311599ad976180499c51d711\",\"license\":\"MIT\"},\"contracts/domain/LoanContractStates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *                  Loan States                     *\\n * ------------------------------------------------ */\\nuint8 constant _UNDEFINED_STATE_ = 0;\\nuint8 constant _NONLEVERAGED_STATE_ = 1;\\nuint8 constant _UNSPONSORED_STATE_ = 2;\\nuint8 constant _SPONSORED_STATE_ = 3;\\nuint8 constant _FUNDED_STATE_ = 4;\\nuint8 constant _ACTIVE_GRACE_STATE_ = 5;\\nuint8 constant _ACTIVE_STATE_ = 6;\\nuint8 constant _DEFAULT_STATE_ = 7;\\nuint8 constant _COLLECTION_STATE_ = 8;\\nuint8 constant _AUCTION_STATE_ = 9;\\nuint8 constant _AWARDED_STATE_ = 10;\\nuint8 constant _PAID_PENDING_STATE_ = 11;\\nuint8 constant _CLOSE_STATE_ = 12;\\nuint8 constant _PAID_STATE_ = 13;\\nuint8 constant _CLOSE_DEFAULT_STATE_ = 14;\\n\",\"keccak256\":\"0x2568dd05e31045e55e2618a877979fd263f71b4d82f9df38c6f93177a0c32855\",\"license\":\"MIT\"},\"contracts/domain/LoanContractTermMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *           Packed Debt Term Mappings              *\\n *-------------------------------------------*/\\nuint256 constant _LOAN_STATE_MASK_ =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0;\\nuint256 constant _LOAN_STATE_MAP_ =        0x000000000000000000000000000000000000000000000000000000000000000F;\\nuint256 constant _FIR_INTERVAL_MASK_ =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F;\\nuint256 constant _FIR_INTERVAL_MAP_ =      0x00000000000000000000000000000000000000000000000000000000000000F0;\\nuint256 constant _FIR_MASK_ =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF;\\nuint256 constant _FIR_MAP_ =               0x000000000000000000000000000000000000000000000000000000000000FF00;\\nuint256 constant _LOAN_START_MASK_ =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFF;\\nuint256 constant _LOAN_START_MAP_ =        0x0000000000000000000000000000000000000000000000000000FFFFFFFF0000;\\nuint256 constant _LOAN_DURATION_MASK_ =    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFF;\\nuint256 constant _LOAN_DURATION_MAP_ =     0x00000000000000000000000000000000000000000000FFFFFFFF000000000000;\\nuint256 constant _IS_FIXED_MASK_ =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _IS_FIXED_MAP_ =          0x0000000000000000000000000000000000000000000F00000000000000000000;\\nuint256 constant _COMMITAL_MASK_ =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _COMMITAL_MAP_ =          0x00000000000000000000000000000000000000000FF000000000000000000000;\\nuint256 constant _LENDER_ROYALTIES_MASK_ = 0xFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _LENDER_ROYALTIES_MAP_ =  0x00FF000000000000000000000000000000000000000000000000000000000000;\\nuint256 constant _LOAN_COUNT_MASK_ =       0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _LOAN_COUNT_MAP_ =        0xFF00000000000000000000000000000000000000000000000000000000000000;\\nuint256 constant _CLEANUP_MASK_ =          0xFFFF0000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFF;\\n\\nuint8 constant _LOAN_STATE_POS_ = 0;\\nuint8 constant _FIR_INTERVAL_POS_ = 4;\\nuint8 constant _FIR_POS_ = 8;\\nuint8 constant _LOAN_START_POS_ = 16;\\nuint8 constant _LOAN_DURATION_POS_ = 48;\\nuint8 constant _IS_FIXED_POS_ = 80;\\nuint8 constant _COMMITAL_POS_ = 84;\\nuint8 constant _LENDER_ROYALTIES_POS_ = 240;\\nuint8 constant _LOAN_COUNT_POS_ = 248;\\n\",\"keccak256\":\"0x049c6fb78ce1cff66ec933608058fd25fe5568c40d6fdd5f3d9dc85670d08788\",\"license\":\"MIT\"},\"contracts/interfaces/IAnzaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAnzaToken is IAccessControl {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function anzaTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _debtId,\\n        bytes memory _data\\n    ) external;\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the borrower of a debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The borrower of the debt.\\n    function borrowerOf(uint256 _debtId) external view returns (address);\\n\\n    /// @notice Get the lender of a debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The lender of the debt.\\n    function lenderOf(uint256 _debtId) external view returns (address);\\n\\n    function checkBorrowerOf(\\n        address _account,\\n        uint256 _debtId\\n    ) external view returns (bool);\\n\\n    /// @notice Get the borrower token ID for a given debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The borrower token ID of the debt.\\n    function borrowerTokenId(uint256 _debtId) external pure returns (uint256);\\n\\n    /// @notice Get the lender token ID for a given debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The lender token ID of the debt.\\n    function lenderTokenId(uint256 _debtId) external pure returns (uint256);\\n\\n    /// @dev Total amount of tokens in with a given id.\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n    /// - MUST revert if `_to` is the zero address.\\n    /// - MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n    /// - MUST revert on any other error.\\n    /// - MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// - After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// @param _from Source address\\n    /// @param _to Target address\\n    /// @param _id ID of the token type\\n    /// @param _amount Transfer amount\\n    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /// @param _debtId argument MUST be the debt ID for deriving token ID being transferred.\\n    /// @param _value argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n    function mint(uint256 _debtId, uint256 _value) external;\\n\\n    /// @param _to argument MUST be the address of the recipient whose balance is increased.\\n    /// @param _id argument MUST be the token ID being transferred.\\n    /// @param _value argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        string calldata _collateralURI,\\n        bytes memory _data\\n    ) external;\\n\\n    /// @param _account argument MUST be the address of the owner/operator whose balance is decreased.\\n    /// @param _id argument MUST be the token being burned.\\n    /// @param _value argument MUST be the number of tokens the holder balance is decreased by.\\n    function burn(address _account, uint256 _id, uint256 _value) external;\\n\\n    function burnBatch(\\n        address _account,\\n        uint256[] memory _ids,\\n        uint256[] memory _values\\n    ) external;\\n\\n    function burnBorrowerToken(uint256 _debtId) external;\\n}\\n\",\"keccak256\":\"0x6677d692b27c2fcebd4bf593eb642137907edd9478e0b57d927b53ad69c2c7fc\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICollateralVault {\\n    error UnallowedDeposit();\\n    error UnallowedWithdrawal();\\n    error IllegalDebtId();\\n\\n    event DepositedCollateral(\\n        address indexed from,\\n        address indexed collateralAddress,\\n        uint256 indexed collateralId\\n    );\\n\\n    event WithdrawnCollateral(\\n        address indexed to,\\n        address indexed collateralAddress,\\n        uint256 indexed collateralId\\n    );\\n\\n    struct Collateral {\\n        address collateralAddress;\\n        uint256 collateralId;\\n        bool vault;\\n    }\\n\\n    function totalCollateral() external view returns (uint256);\\n\\n    function getCollateral(\\n        uint256 _debtId\\n    ) external view returns (Collateral memory);\\n\\n    function setCollateral(\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _debtId\\n    ) external;\\n\\n    function depositAllowed(\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _debtId\\n    ) external returns (bool);\\n\\n    function withdrawalAllowed(\\n        address _to,\\n        uint256 _debtId\\n    ) external view returns (bool);\\n\\n    function withdraw(\\n        address _loanContractAddress,\\n        uint256 _debtId\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7e3d1db0b042763c42db1232c90f0c10df264a0e399090ad4ff98b68c3e43668\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILoanCodec {\\n    error InactiveLoanState();\\n    error InvalidLoanParameter(bytes4 parameter);\\n\\n    function getDebtTerms(uint256 _debtId) external view returns (bytes32);\\n\\n    function loanState(uint256 _debtId) external view returns (uint256);\\n\\n    function firInterval(uint256 _debtId) external view returns (uint256);\\n\\n    function fixedInterestRate(uint256 _debtId) external view returns (uint256);\\n\\n    function isFixed(uint256 _debtId) external view returns (uint256);\\n\\n    function loanLastChecked(uint256 _debtId) external view returns (uint256);\\n\\n    function loanStart(uint256 _debtId) external view returns (uint256);\\n\\n    function loanDuration(uint256 _debtId) external view returns (uint256);\\n\\n    function loanCommital(uint256 _debtId) external view returns (uint256);\\n\\n    function loanClose(uint256 _debtId) external view returns (uint256);\\n\\n    function lenderRoyalties(uint256 _debtId) external view returns (uint256);\\n\\n    function activeLoanCount(uint256 _debtId) external view returns (uint256);\\n\\n    function totalFirIntervals(\\n        uint256 _debtId,\\n        uint256 _seconds\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb075d4eaa58627726419fb26aa6c1d2434219eb95cb004093b988b7cef27495f\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILoanContract {\\n    error InvalidCollateral();\\n    error InvalidParticipant();\\n    error FailedFundsTransfer();\\n    error ExceededRefinanceLimit();\\n\\n    struct Debt {\\n        uint256 debtId;\\n        uint256 collateralNonce;\\n        uint256 activeLoanIndex;\\n    }\\n\\n    event LoanContractInitialized(\\n        address indexed collateralAddress,\\n        uint256 indexed collateralId,\\n        uint256 indexed debtId,\\n        uint256 activeLoanIndex\\n    );\\n\\n    event PaymentSubmitted(\\n        uint256 indexed debtId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint256 amount\\n    );\\n\\n    event LoanBorrowerChanged(\\n        uint256 indexed debtId,\\n        address indexed newBorrower,\\n        address indexed oldBorrower\\n    );\\n\\n    function totalDebts() external returns (uint256);\\n\\n    function debts(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) external returns (uint256, uint256, uint256);\\n\\n    function debtIdBranch(uint256 _childDebtId) external returns (uint256, uint256, uint256);\\n\\n    function debtBalanceOf(uint256 _debtId) external view returns (uint256);\\n\\n    function getCollateralNonce(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) external view returns (uint256);\\n\\n    function getCollateralDebtId(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) external view returns (uint256);\\n\\n    function initLoanContract(\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        bytes calldata _borrowerSignature\\n    ) external payable;\\n\\n    function initLoanContract(\\n        bytes32 _contractTerms,\\n        uint256 _debtId,\\n        bytes calldata _borrowerSignature\\n    ) external payable;\\n\\n    function mintReplica(uint256 _debtId) external;\\n}\\n\",\"keccak256\":\"0x4dffcda95b40bcf225aa3c5c41a76cb6a186439ab33789be9fd268ab153fba62\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILoanManager {\\n    event LoanTermsRevoked(\\n        address indexed borrower,\\n        bytes32 indexed hashedTerms\\n    );\\n\\n    event LoanTermsReinstated(\\n        address indexed borrower,\\n        bytes32 indexed hashedTerms\\n    );\\n\\n    function maxRefinances() external returns (uint256);\\n\\n    function setMaxRefinances(uint256 _maxRefinances) external;\\n\\n    function updateLoanState(uint256 _debtId) external;\\n\\n    function verifyLoanActive(uint256 _debtId) external view;\\n\\n    function checkLoanActive(uint256 _debtId) external view returns (bool);\\n\\n    function checkLoanDefault(uint256 _debtId) external view returns (bool);\\n\\n    function checkLoanExpired(uint256 _debtId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c162bada3001437b023fa4b8290c9ec801704d6c4a54b35943e1f8bcfebae5b\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanTreasurey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILoanTreasurey {\\n    error InvalidParticipant();\\n    error InvalidFundsTransfer();\\n    error InactiveLoanState();\\n    error InvalidLoanState();\\n\\n    event Deposited(\\n        uint256 indexed debtId,\\n        address indexed payer,\\n        uint256 weiAmount\\n    );\\n\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    function sponsorPayment(address _sponsor, uint256 _debtId) external payable;\\n\\n    function depositPayment(uint256 _debtId) external payable;\\n\\n    function withdrawFromBalance(uint256 _amount) external returns (bool);\\n\\n    function withdrawCollateral(uint256 _debtId) external returns (bool);\\n\\n    function executeDebtPurchase(\\n        uint256 _debtId,\\n        address _borrower,\\n        address _purchaser\\n    ) external payable returns (bool);\\n\\n    function updateDebt(uint256 _debtId) external;\\n}\\n\",\"keccak256\":\"0x7c40a0f73de3a9c4519c870882072026dc80275c61e7dbf23f2646dbc0f0b163\",\"license\":\"MIT\"},\"contracts/interfaces/IManagerAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAnzaToken.sol\\\";\\nimport \\\"./ILoanTreasurey.sol\\\";\\n\\ninterface IManagerAccessController {\\n    function anzaToken() external returns (address);\\n\\n    function loanTreasurer() external returns (address);\\n\\n    function collateralVault() external returns (address);\\n\\n    function setAnzaToken(address _anzaTokenAddress) external;\\n\\n    function setLoanTreasurer(address _loanTreasurerAddress) external;\\n\\n    function setCollateralVault(address _collateralVaultAddress) external;\\n}\\n\",\"keccak256\":\"0xb3a19d9c2fbff2cfa9391c83fa8fc7b0065e3e57a37a8c1072ddaf0e628041f8\",\"license\":\"MIT\"},\"contracts/libraries/LibLoanContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../domain/LoanContractFIRIntervals.sol\\\";\\nimport \\\"../domain/LoanContractTermMaps.sol\\\";\\n\\nimport \\\"../abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nlibrary LibLoanContractSigning {\\n    struct ContractTerms {\\n        uint256 firInterval;\\n        uint8 fixedInterestRate;\\n        uint8 isFixed;\\n        uint8 commital;\\n        uint128 principal;\\n        uint32 gracePeriod;\\n        uint32 duration;\\n        uint32 termsExpiry;\\n        uint8 lenderRoyalties;\\n    }\\n\\n    function createContractTerms(\\n        uint8 _firInterval,\\n        uint8 _fixedInterestRate,\\n        uint8 _isFixed,\\n        uint8 _commital,\\n        uint32 _gracePeriod,\\n        uint32 _duration,\\n        uint32 _termsExpiry,\\n        uint8 _lenderRoyalties\\n    ) public pure returns (bytes32 _contractTerms) {\\n        assembly {\\n            mstore(0x20, _firInterval)\\n            mstore(0x1f, _fixedInterestRate)\\n\\n            switch eq(_isFixed, 0x01)\\n            case true {\\n                mstore(0x1e, add(0x65, _commital))\\n            }\\n            case false {\\n                mstore(0x1e, _commital)\\n            }\\n\\n            mstore(0x0d, _gracePeriod)\\n            mstore(0x09, _duration)\\n            mstore(0x05, _termsExpiry)\\n            mstore(0x01, _lenderRoyalties)\\n\\n            _contractTerms := mload(0x20)\\n        }\\n    }\\n\\n    function recoverSigner(\\n        uint256 _principal,\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _collateralNonce,\\n        bytes memory _signature\\n    ) public pure returns (address) {\\n        bytes32 _message = prefixed(\\n            keccak256(\\n                abi.encode(\\n                    _principal,\\n                    _contractTerms,\\n                    _collateralAddress,\\n                    _collateralId,\\n                    _collateralNonce\\n                )\\n            )\\n        );\\n\\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n\\n        return ecrecover(_message, v, r, s);\\n    }\\n\\n    function hashMessage(\\n        uint256 _principal,\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _collateralNonce\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _principal,\\n                    _contractTerms,\\n                    _collateralAddress,\\n                    _collateralId,\\n                    _collateralNonce\\n                )\\n            );\\n    }\\n\\n    function prefixed(bytes32 _hash) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _hash)\\n            );\\n    }\\n\\n    function splitSignature(\\n        bytes memory _signature\\n    ) public pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n    }\\n}\\n\\nlibrary LibLoanContractIndexer {\\n    function getBorrowerTokenId(uint256 _debtId) public pure returns (uint256) {\\n        return (2 * _debtId) + 1;\\n    }\\n\\n    function getLenderTokenId(uint256 _debtId) public pure returns (uint256) {\\n        return (2 * _debtId);\\n    }\\n}\\n\\nlibrary LibLoanContractTerms {\\n    struct ContractTerms {\\n        uint256 loanState;\\n        uint256 firInterval;\\n        uint256 fixedInterestRate;\\n        uint256 loanStart;\\n        uint256 loanDuration;\\n        uint256 loanCommital;\\n        uint256 loanCommitalTime;\\n        uint256 loanClose;\\n        uint256 isFixed;\\n        uint256 lenderRoyalties;\\n        uint256 activeLoanCount;\\n    }\\n\\n    function loanState(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanState) {\\n        uint8 __loanState;\\n\\n        assembly {\\n            __loanState := and(_contractTerms, _LOAN_STATE_MAP_)\\n        }\\n\\n        unchecked {\\n            _loanState = __loanState;\\n        }\\n    }\\n\\n    function firInterval(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _firInterval) {\\n        uint8 __firInterval;\\n\\n        assembly {\\n            __firInterval := shr(\\n                _FIR_INTERVAL_POS_,\\n                and(_contractTerms, _FIR_INTERVAL_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _firInterval = __firInterval;\\n        }\\n    }\\n\\n    function fixedInterestRate(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _fixedInterestRate) {\\n        bytes32 __fixedInterestRate;\\n\\n        assembly {\\n            __fixedInterestRate := shr(\\n                _FIR_POS_,\\n                and(_contractTerms, _FIR_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _fixedInterestRate = uint256(__fixedInterestRate);\\n        }\\n    }\\n\\n    function loanLastChecked(\\n        bytes32 _contractTerms\\n    ) external pure returns (uint256) {\\n        return loanStart(_contractTerms);\\n    }\\n\\n    function loanStart(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanStart) {\\n        uint32 __loanStart;\\n\\n        assembly {\\n            __loanStart := shr(\\n                _LOAN_START_POS_,\\n                and(_contractTerms, _LOAN_START_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanStart = __loanStart;\\n        }\\n    }\\n\\n    function loanDuration(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanDuration) {\\n        uint32 __loanDuration;\\n\\n        assembly {\\n            __loanDuration := shr(\\n                _LOAN_DURATION_POS_,\\n                and(_contractTerms, _LOAN_DURATION_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanDuration = __loanDuration;\\n        }\\n    }\\n\\n    function loanCommital(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanCommital) {\\n        uint32 __loanCommital;\\n\\n        assembly {\\n            __loanCommital := shr(\\n                _COMMITAL_POS_,\\n                and(_contractTerms, _COMMITAL_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanCommital = __loanCommital;\\n        }\\n    }\\n\\n    function loanCommitalTime(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256) {\\n        int128 _loanStart = ABDKMath64x64.fromUInt(loanStart(_contractTerms));\\n        int128 _loanDuration = ABDKMath64x64.fromUInt(\\n            loanDuration(_contractTerms)\\n        );\\n        int128 _ratio = ABDKMath64x64.divu(loanCommital(_contractTerms), 100);\\n        int128 _commitalPeriod = ABDKMath64x64.mul(_loanDuration, _ratio);\\n        int128 _commitalTime = ABDKMath64x64.add(_loanStart, _commitalPeriod);\\n\\n        return ABDKMath64x64.toUInt(_commitalTime);\\n    }\\n\\n    function isFixed(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _isFixed) {\\n        uint32 __isFixed;\\n\\n        assembly {\\n            __isFixed := shr(\\n                _IS_FIXED_POS_,\\n                and(_contractTerms, _IS_FIXED_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _isFixed = __isFixed;\\n        }\\n    }\\n\\n    function loanClose(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanClose) {\\n        uint32 __loanClose;\\n\\n        assembly {\\n            __loanClose := add(\\n                shr(_LOAN_START_POS_, and(_contractTerms, _LOAN_START_MAP_)),\\n                shr(\\n                    _LOAN_DURATION_POS_,\\n                    and(_contractTerms, _LOAN_DURATION_MAP_)\\n                )\\n            )\\n        }\\n\\n        unchecked {\\n            _loanClose = __loanClose;\\n        }\\n    }\\n\\n    function lenderRoyalties(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _lenderRoyalties) {\\n        assembly {\\n            _lenderRoyalties := shr(\\n                _LENDER_ROYALTIES_POS_,\\n                and(_contractTerms, _LENDER_ROYALTIES_MAP_)\\n            )\\n        }\\n    }\\n\\n    function activeLoanCount(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _activeLoanCount) {\\n        uint8 __activeLoanCount;\\n\\n        assembly {\\n            __activeLoanCount := shr(\\n                _LOAN_COUNT_POS_,\\n                and(_contractTerms, _LOAN_COUNT_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _activeLoanCount = __activeLoanCount;\\n        }\\n    }\\n}\\n\\nlibrary LibLoanContractInterest {\\n    function compoundWithTopoff(\\n        uint256 _principal,\\n        uint256 _ratio,\\n        uint256 _n\\n    ) public pure returns (uint256) {\\n        return\\n            compound(_principal, _ratio, _n) + topoff(_principal, _ratio, _n);\\n    }\\n\\n    function compound(\\n        uint256 _principal,\\n        uint256 _ratio,\\n        uint256 _n\\n    ) public pure returns (uint256) {\\n        return\\n            ABDKMath64x64.mulu(\\n                pow(\\n                    ABDKMath64x64.add(\\n                        ABDKMath64x64.fromUInt(1),\\n                        ABDKMath64x64.divu(_ratio, 100)\\n                    ),\\n                    _n\\n                ),\\n                _principal\\n            );\\n    }\\n\\n    function pow(int128 _x, uint256 _n) public pure returns (int128) {\\n        int128 _r = ABDKMath64x64.fromUInt(1);\\n\\n        while (_n > 0) {\\n            if (_n % 2 == 1) {\\n                _r = ABDKMath64x64.mul(_r, _x);\\n                _n -= 1;\\n            } else {\\n                _x = ABDKMath64x64.mul(_x, _x);\\n                _n /= 2;\\n            }\\n        }\\n\\n        return _r;\\n    }\\n\\n    // Topoff to account for small inaccuracies in compound calculations\\n    function topoff(\\n        uint256 _totalDebt,\\n        uint256 _fixedInterestRate,\\n        uint256 _firIntervals\\n    ) public pure returns (uint256) {\\n        return\\n            _fixedInterestRate == 100 ? 0 : _fixedInterestRate >= 10\\n                ? _firIntervals == 1 && _totalDebt >= 10\\n                    ? 1\\n                    : _totalDebt >= 1000\\n                    ? (_totalDebt / (10 ** 21)) >= 1 ? 10 : 1\\n                    : 0\\n                : _fixedInterestRate == 1\\n                ? _firIntervals == 1 && _totalDebt >= 100\\n                    ? (_totalDebt / (10 ** 21)) >= 1 ? 10 : 1\\n                    : 0\\n                : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x61ff945e4c1ea5f23d2bf6ab7fefd1d8345f972ef6d2cd201e386922025ab428\",\"license\":\"MIT\"},\"contracts/utils/LoanSigningUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract LoanSigningUtils {\\n    function _recoverSigner(\\n        uint256 _principal,\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _collateralNonce,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        bytes32 _message = __prefixed(\\n            keccak256(\\n                abi.encode(\\n                    _principal,\\n                    _contractTerms,\\n                    _collateralAddress,\\n                    _collateralId,\\n                    _collateralNonce\\n                )\\n            )\\n        );\\n\\n        (uint8 v, bytes32 r, bytes32 s) = __splitSignature(_signature);\\n\\n        return ecrecover(_message, v, r, s);\\n    }\\n\\n    function __prefixed(bytes32 _hash) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _hash)\\n            );\\n    }\\n\\n    function __splitSignature(\\n        bytes memory _signature\\n    ) private pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3947fb8766973da1971f6f6a1d2eb22faf5f114045d4ac39b34a7bd1ac6a1c2\",\"license\":\"MIT\"},\"contracts/utils/TypeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nabstract contract TypeUtils {\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function _toUint32(uint256 value) internal pure returns (uint32) {\\n        require(\\n            value <= type(uint32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return uint32(value);\\n    }\\n}\\n\",\"keccak256\":\"0xce63cb96935e4460bfe4c34965f3ddc247b8401b9beb774eb0e38be950ded8b1\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526107d860055534801562000016575f80fd5b50620000315f8051602062002e608339815191528062000079565b620000595f8051602062002e408339815191525f8051602062002e6083398151915262000079565b620000735f8051602062002e6083398151915233620000c5565b62000261565b5f828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b5f8051602062002e408339815191528214620000eb57620000e78282620000f6565b5050565b620000e7816200017c565b5f8281526001602090815260408083206001600160a01b038516845290915290205460ff16620000e7575f8281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600354620001a3905f8051602062002e40833981519152906001600160a01b0316620001df565b620001bd5f8051602062002e4083398151915282620000f6565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b5f8281526001602090815260408083206001600160a01b038516845290915290205460ff1615620000e7575f8281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612bd1806200026f5f395ff3fe608060405260043610610268575f3560e01c806356f9654b1161014a57806390d17f11116100be578063a796d4df11610078578063a796d4df1461085c578063a9b002031461087b578063ca54f8641461089a578063d547741f146108b9578063daece59c146108d8578063e8627e241461091c575f80fd5b806390d17f111461079c57806391d14854146107bb5780639f590b7b146107da578063a0f1e1fb146107f9578063a217fddf1461082a578063a3991cf21461083d575f80fd5b80637afb41411161010f5780637afb4141146106d457806386121de0146106e757806389ac88bf146107185780638d40b28c146107375780638fd478151461076857806390c2bd2214610787575f80fd5b806356f9654b146105f157806367c2e33f1461061057806368a806c41461062f5780636f81a8011461064e57806375cf559914610693575f80fd5b80631fd3ca77116101e1578063363cec32116101a6578063363cec321461050357806336568abe146105345780633cf35c7a14610553578063427069891461058757806342fbcce8146105a457806349b274ed146105c3575f80fd5b80631fd3ca7714610452578063248a9ca31461047157806328e04ddc146104a05780632f2ff15d146104b35780633255c49b146104d2575f80fd5b80630bece79c116102325780630bece79c1461038157806314a1c32d146103b2578063188e4681146103c75780631d130cd6146103e45780631dcd2d79146104055780631ec4242d14610433575f80fd5b806278eec61461026c578062d32e8c146102c657806301ffc9a7146102ff5780630888b6d01461032e5780630aaaf43d1461034d575b5f80fd5b348015610277575f80fd5b506102a6610286366004612560565b60096020525f908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b3480156102d1575f80fd5b506102f16102e0366004612560565b5f9081526020819052604090205490565b6040519081526020016102bd565b34801561030a575f80fd5b5061031e610319366004612577565b61093b565b60405190151581526020016102bd565b348015610339575f80fd5b506102f1610348366004612560565b61099b565b348015610358575f80fd5b506102f1610367366004612560565b5f9081526020819052604090205460101c63ffffffff1690565b34801561038c575f80fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016102bd565b3480156103bd575f80fd5b506102f160075481565b3480156103d2575f80fd5b506004546001600160a01b031661039a565b3480156103ef575f80fd5b506104036103fe366004612560565b610a16565b005b348015610410575f80fd5b506102f161041f366004612560565b5f9081526020819052604090205460f81c90565b34801561043e575f80fd5b5061040361044d366004612560565b610c5a565b34801561045d575f80fd5b5061031e61046c366004612560565b610ca9565b34801561047c575f80fd5b506102f161048b366004612560565b5f908152600160208190526040909120015490565b6104036104ae3660046125f7565b610ce3565b3480156104be575f80fd5b506104036104cd36600461265c565b6110f4565b3480156104dd575f80fd5b506102f16104ec366004612560565b5f9081526020819052604090205460501c600f1690565b34801561050e575f80fd5b506102f161051d366004612560565b5f9081526020819052604090205460041c600f1690565b34801561053f575f80fd5b5061040361054e36600461265c565b61111e565b34801561055e575f80fd5b506102f161056d366004612560565b5f9081526020819052604090205460301c63ffffffff1690565b348015610592575f80fd5b506003546001600160a01b031661039a565b3480156105af575f80fd5b506104036105be36600461268a565b61119d565b3480156105ce575f80fd5b506102f16105dd366004612560565b5f90815260208190526040902054600f1690565b3480156105fc575f80fd5b5061040361060b366004612560565b6111bd565b34801561061b575f80fd5b5061031e61062a366004612560565b6111e6565b34801561063a575f80fd5b5061040361064936600461268a565b611275565b348015610659575f80fd5b506102a66106683660046126a5565b600860209081525f928352604080842090915290825290208054600182015460029092015490919083565b34801561069e575f80fd5b506102f16106ad3660046126a5565b6001600160a01b03919091165f908152600860209081526040808320938352929052205490565b6104036106e23660046126cf565b6112af565b3480156106f2575f80fd5b506102f1610701366004612560565b5f9081526020819052604090205460f01c60ff1690565b348015610723575f80fd5b50610403610732366004612560565b6117be565b348015610742575f80fd5b506102f1610751366004612560565b5f9081526020819052604090205460081c60ff1690565b348015610773575f80fd5b506102f16107823660046126a5565b6117ef565b348015610792575f80fd5b506102f160055481565b3480156107a7575f80fd5b506104036107b636600461268a565b611827565b3480156107c6575f80fd5b5061031e6107d536600461265c565b611861565b3480156107e5575f80fd5b506102f16107f436600461271e565b61188b565b348015610804575f80fd5b506102f1610813366004612560565b5f9081526020819052604090205460541c60ff1690565b348015610835575f80fd5b506102f15f81565b348015610848575f80fd5b506102f1610857366004612560565b6118d0565b348015610867575f80fd5b506102f1610876366004612560565b6118fb565b348015610886575f80fd5b50610403610895366004612560565b611917565b3480156108a5575f80fd5b506104036108b4366004612560565b611963565b3480156108c4575f80fd5b506104036108d336600461265c565b611a01565b3480156108e3575f80fd5b5061031e6108f23660046126a5565b6001600160a01b03919091165f908152600660209081526040808320938352929052205460ff1690565b348015610927575f80fd5b5061031e610936366004612560565b611a26565b5f635be1e2f560e11b6001600160e01b03198316148061096b5750634a23979d60e01b6001600160e01b03198316145b80610986575063f83e032d60e01b6001600160e01b03198316145b80610995575061099582611a5c565b92915050565b6004545f906001600160a01b031663bd85b0396109b9846002612752565b6040518263ffffffff1660e01b81526004016109d791815260200190565b602060405180830381865afa1580156109f2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109959190612769565b5f80516020612b5c833981519152610a2d81611a90565b610a3682611a26565b610a8657610a6d60405180604001604052806011815260200170496e616374697665206c6f616e3a20257360781b81525083611a9a565b6040516390f54c8560e01b815260040160405180910390fd5b610a8f826111e6565b15610ae057610ac86040518060400160405280601281526020017144656661756c746564206c6f616e3a20257360701b81525083611a9a565b610ad182611adf565b610adc826007611b77565b5050565b6004545f906001600160a01b031663bd85b039610afe856002612752565b6040518263ffffffff1660e01b8152600401610b1c91815260200190565b602060405180830381865afa158015610b37573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5b9190612769565b11610b9a57610b8f6040518060400160405280600d81526020016c50616964206c6f616e3a20257360981b81525083611a9a565b610adc82600d611b77565b5f82815260208190526040902054600690600f1603610bed57610be46040518060400160405280600f81526020016e416374697665206c6f616e3a20257360881b81525083611a9a565b610adc82611adf565b610c11825f81815260208190526040812054429060101c63ffffffff161192915050565b610adc57610c4f60405180604001604052806018815260200177477261636520706572696f6420657870697265643a20257360401b81525083611a9a565b610be4826006611b77565b335f818152600660209081526040808320858452909152808220805460ff19166001179055518392917f642abefd8ba8508271dc240574875c4b7af73ff6b2a5c0cc6ba41e8b86b6375c91a350565b5f81815260208190526040812054600790600f161015801561099557505f82815260208190526040902054600a90600f165b111592915050565b5f610ced42611be7565b905034610cfb878383611c4f565b6040516331a9108f60e11b81526004810186905286905f906001600160a01b03831690636352211e90602401602060405180830381865afa158015610d42573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d669190612780565b6001600160a01b0389165f9081526008602090815260408083208b84529091528120600780549394509092909190610d9d9061279b565b919050819055815f0181905550610e02848b8b8b856001015f8154610dc19061279b565b9190508190558c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611e5392505050565b6001600160a01b0316826001600160a01b0316141580610e2a57506001600160a01b03821633145b15610e48576040516350a2e21f60e11b815260040160405180910390fd5b610e53855f8c611f73565b826001600160a01b031663b88d4fde8360025f9054906101000a90046001600160a01b03168b600754604051602001610e8e91815260200190565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610ebc9493929190612800565b5f604051808303815f87803b158015610ed3575f80fd5b505af1158015610ee5573d5f803e3d5ffd5b50506003546040516001600160a01b0386811660248301525f94509091169150869060440160408051601f198184030181529181526020820180516001600160e01b031663919747fb60e01b17905251610f3f919061283c565b5f6040518083038185875af1925050503d805f8114610f79576040519150601f19603f3d011682016040523d82523d5f602084013e610f7e565b606091505b5050905080610fa05760405163176bfe0760e11b815260040160405180910390fd5b6004546007546001600160a01b039091169063a4b645eb903390610fc5906002612752565b60405163c87b56dd60e01b8152600481018e905289906001600160a01b038a169063c87b56dd906024015f60405180830381865afa158015611009573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611030919081019061286b565b600754604051611044918b91602001612913565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611073959493929190612935565b5f604051808303815f87803b15801561108a575f80fd5b505af115801561109c573d5f803e3d5ffd5b50505050600754898b6001600160a01b03167f4929ac7ab6cc744fb93574c8b1e020e958956a560825577596e1f098760b54725f6040516110df91815260200190565b60405180910390a45050505050505050505050565b5f828152600160208190526040909120015461110f81611a90565b6111198383611fa4565b505050565b6001600160a01b03811633146111935760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610adc8282611fcb565b5f80516020612b7c8339815191526111b481611a90565b610adc82612031565b6111c681611a26565b6111e3576040516390f54c8560e01b815260040160405180910390fd5b50565b6004545f9081906001600160a01b031663bd85b039611206856002612752565b6040518263ffffffff1660e01b815260040161122491815260200190565b602060405180830381865afa15801561123f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112639190612769565b118015610995575042610cdb836118d0565b5f80516020612b7c83398151915261128c81611a90565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6112b883610ca9565b156112d6576040516368f7a67560e11b815260040160405180910390fd5b5f6112e042611be7565b9050346112ee868383611c4f565b6002546040516302a62a4960e41b8152600481018790526001600160a01b03909116905f908290632a62a49090602401606060405180830381865afa158015611339573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061135d9190612993565b80516001600160a01b03165f908152600860209081526040808320828501518452825280832080548085526009909352908320918255600180820154908301556002808201549201919091556007805493945090929091906113be9061279b565b918290555081556002810180545f906113d69061279b565b919050819055505f61143d858b855f01518660200151866001015f81546113fc9061279b565b9190508190558d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611e5392505050565b6004805460405163163be8c160e11b81526001600160a01b0380851693820193909352602481018d90529293501690632c77d18290604401602060405180830381865afa158015611490573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114b491906129f8565b15806114c857506001600160a01b03811633145b156114e6576040516350a2e21f60e11b815260040160405180910390fd5b6114f58683600201548c611f73565b82516020840151600754604051639fea3e0760e01b81526001600160a01b0393841660048201526024810192909252604482015290851690639fea3e07906064015f604051808303815f87803b15801561154d575f80fd5b505af115801561155f573d5f803e3d5ffd5b505050505f61156d8a61099b565b6003549091505f906001600160a01b03168288101561158c578761158e565b825b6040516001600160a01b0386166024820152604481018e905260640160408051601f198184030181529181526020820180516001600160e01b03166386cd0a4760e01b179052516115df919061283c565b5f6040518083038185875af1925050503d805f8114611619576040519150601f19603f3d011682016040523d82523d5f602084013e61161e565b606091505b50509050806116405760405163176bfe0760e11b815260040160405180910390fd5b6004546007546001600160a01b039091169063a4b645eb903390611665906002612752565b885160208a015160405163c87b56dd60e01b815260048101919091528c916001600160a01b03169063c87b56dd906024015f60405180830381865afa1580156116b0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526116d7919081019061286b565b6007546040516116eb918b91602001612913565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161171a959493929190612935565b5f604051808303815f87803b158015611731575f80fd5b505af1158015611743573d5f803e3d5ffd5b505050506007548560200151865f01516001600160a01b03167f4929ac7ab6cc744fb93574c8b1e020e958956a560825577596e1f098760b5472876002015460405161179191815260200190565b60405180910390a4600160075f8282546117ab9190612a11565b9091555050505050505050505050505050565b5f80516020612b7c8339815191526117d581611a90565b60ff8211156117e6576107d86117e8565b815b6005555050565b6001600160a01b0382165f908152600860209081526040808320848452909152812060019081015461182091612a11565b9392505050565b5f80516020612b7c83398151915261183e81611a90565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b5f9182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b5f82815260208190526040812054600481901c600f169060301c63ffffffff16808411156118b957806118bb565b835b93506118c7828561208e565b95945050505050565b5f90815260208190526040902054601081901c63ffffffff90811660309290921c8116919091011690565b5f8181526020819052604081205460101c63ffffffff16610995565b335f818152600660209081526040808320858452909152808220805460ff19169055518392917f5f3183bf1fbf3f9aa30f91fa5c2b16851dd6aa63f139d14fd51477b250eb821791a350565b60045433906001600160a01b031663a4b645eb82611982856002612752565b61198d906001612a11565b600185876040516020016119a2929190612913565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016119d09493929190612a24565b5f604051808303815f87803b1580156119e7575f80fd5b505af11580156119f9573d5f803e3d5ffd5b505050505050565b5f8281526001602081905260409091200154611a1c81611a90565b6111198383611fcb565b5f81815260208190526040812054600590600f161015801561099557505f82815260208190526040902054600690600f16610cdb565b5f6001600160e01b03198216637965db0b60e01b148061099557506301ffc9a760e01b6001600160e01b0319831614610995565b6111e38133612167565b610adc8282604051602401611ab0929190612a5d565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526121c0565b5f81815260208190526040902054600f81166006811115611afe575f80fd5b50806020528063ffffffff60301b1660301c8165ffffffff00001660101c014281811115611b295750805b602080515f95865290859052604090942063ffffffff60301b1965ffffffff00001990951665ffffffff0000601084901b16189490941663ffffffff60301b9190920360301b161890915550565b5f82815260208190526040902054600f8116828103611b94575f80fd5b5f84815260208190526040808220600f19909416600f861618938490555160ff808416929086169187917f361d0bb4f0b625387fc860030dd8ba1ec262c62d85ec5ded355aa4e43e63296491a450505050565b5f63ffffffff821115611c4b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161118a565b5090565b601f8390525f8051601b85905281516017869052825160138790528351600188905284519488905292939192909187606460ff87161115611cac576040516343f591d960e11b815261118a9063ecc752dd60e01b90600401612a7e565b6105a08563ffffffff161015611cde576040516343f591d960e11b815261118a906319ec869760e21b90600401612a7e565b63ffffffff84161580611cfe575063ffffffff8881168582160184821601115b15611d25576040516343f591d960e11b815261118a9063fcbf851160e01b90600401612a7e565b865f03611d4e576040516343f591d960e11b815261118a90636a90143560e01b90600401612a7e565b600f8160ff161115611d7c576040516343f591d960e11b815261118a90631427d12960e31b90600401612a7e565b732279B7A0a67DB372996a5FaB50D91eAA73d2eBe6636d8866f18884611dab8560ff168963ffffffff1661208e565b6040516001600160e01b031960e086901b168152600481019390935260ff90911660248301526044820152606401602060405180830381865af4925050508015611e12575060408051601f3d908101601f19168201909252611e0f91810190612769565b60015b611e465760ff811615611e41576040516343f591d960e11b815261118a90638fe03ac360e01b90600401612a7e565b611e48565b505b505050505050505050565b6040805160208082018990528183018890526001600160a01b03871660608301526080820186905260a08083018690528351808403909101815260c0830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060e084015260fc808401919091528351808403909101815261011c90920190925280519101205f905f805f611f0186602081015160408201516060909201515f1a92909190565b604080515f81526020810180835289905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015611f59573d5f803e3d5ffd5b5050604051601f1901519c9b505050505050505050505050565b600554821115611f9657604051630c5eb3e760e21b815260040160405180910390fd5b6111198360075484846121e0565b5f80516020612b5c8339815191528214611fc257610adc828261234e565b610adc81612031565b611fd58282611861565b15610adc575f8281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600354612055905f80516020612b5c833981519152906001600160a01b0316611fcb565b61206c5f80516020612b5c8339815191528261234e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b5f825f0361209d575080610995565b826001036120b7576120b0603c83612a93565b9050610995565b826002036120cb576120b0610e1083612a93565b826003036120e0576120b06201518083612a93565b826004036120f5576120b062093a8083612a93565b8260050361210a576120b06212750083612a93565b8260060361211f576120b06224ea0083612a93565b82600703612134576120b062375f0083612a93565b82600803612149576120b06249d40083612a93565b82600e0361215f576120b06301da9c0083612a93565b505f92915050565b6121718282611861565b610adc5761217e816123b8565b6121898360206123ca565b60405160200161219a929190612ab2565b60408051601f198184030181529082905262461bcd60e51b825261118a91600401612b20565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f816001525f518260025260ff5f5116836013525f51846017525f5185601f525f518660041b602052825f81146122235760208051600f19166005189052612231565b60208051600f191660061890525b508460081b61ff001660205161ff00191618602052828a0160101b65ffffffff00001660205165ffffffff00001916186020528160301b63ffffffff60301b1660205163ffffffff60301b19161860205260648411600181146122995780156122c9576122e4565b6020805160ff60541b19600f60501b19909116600160501b181660ff60541b606419880160541b161890526122e4565b60208051610fff60501b191660ff60541b605488901b161890525b508060f01b60ff60f01b1660205160ff60f01b19161860205250505050508260f81b6001600160f81b0319166020516001600160f81b0316186020526020516001605c1b600160f01b0319169050805f808681526020019081526020015f20819055505050505050565b6123588282611861565b610adc575f8281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60606109956001600160a01b03831660145b60605f6123d8836002612752565b6123e3906002612a11565b67ffffffffffffffff8111156123fb576123fb612857565b6040519080825280601f01601f191660200182016040528015612425576020820181803683370190505b509050600360fc1b815f8151811061243f5761243f612b32565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061246d5761246d612b32565b60200101906001600160f81b03191690815f1a9053505f61248f846002612752565b61249a906001612a11565b90505b6001811115612511576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124ce576124ce612b32565b1a60f81b8282815181106124e4576124e4612b32565b60200101906001600160f81b03191690815f1a90535060049490941c9361250a81612b46565b905061249d565b5083156118205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161118a565b5f60208284031215612570575f80fd5b5035919050565b5f60208284031215612587575f80fd5b81356001600160e01b031981168114611820575f80fd5b6001600160a01b03811681146111e3575f80fd5b5f8083601f8401126125c2575f80fd5b50813567ffffffffffffffff8111156125d9575f80fd5b6020830191508360208285010111156125f0575f80fd5b9250929050565b5f805f805f6080868803121561260b575f80fd5b85359450602086013561261d8161259e565b935060408601359250606086013567ffffffffffffffff81111561263f575f80fd5b61264b888289016125b2565b969995985093965092949392505050565b5f806040838503121561266d575f80fd5b82359150602083013561267f8161259e565b809150509250929050565b5f6020828403121561269a575f80fd5b81356118208161259e565b5f80604083850312156126b6575f80fd5b82356126c18161259e565b946020939093013593505050565b5f805f80606085870312156126e2575f80fd5b8435935060208501359250604085013567ffffffffffffffff811115612706575f80fd5b612712878288016125b2565b95989497509550505050565b5f806040838503121561272f575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176109955761099561273e565b5f60208284031215612779575f80fd5b5051919050565b5f60208284031215612790575f80fd5b81516118208161259e565b5f600182016127ac576127ac61273e565b5060010190565b5f5b838110156127cd5781810151838201526020016127b5565b50505f910152565b5f81518084526127ec8160208601602086016127b3565b601f01601f19169290920160200192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612832908301846127d5565b9695505050505050565b5f825161284d8184602087016127b3565b9190910192915050565b634e487b7160e01b5f52604160045260245ffd5b5f6020828403121561287b575f80fd5b815167ffffffffffffffff80821115612892575f80fd5b818401915084601f8301126128a5575f80fd5b8151818111156128b7576128b7612857565b604051601f8201601f19908116603f011681019083821181831017156128df576128df612857565b816040528281528760208487010111156128f7575f80fd5b6129088360208301602088016127b3565b979650505050505050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60018060a01b038616815284602082015283604082015260a060608201525f61296160a08301856127d5565b828103608084015261297381856127d5565b98975050505050505050565b8051801515811461298e575f80fd5b919050565b5f606082840312156129a3575f80fd5b6040516060810181811067ffffffffffffffff821117156129c6576129c6612857565b60405282516129d48161259e565b8152602083810151908201526129ec6040840161297f565b60408201529392505050565b5f60208284031215612a08575f80fd5b6118208261297f565b808201808211156109955761099561273e565b60018060a01b038516815283602082015282604082015260a060608201525f60a082015260c060808201525f61283260c08301846127d5565b604081525f612a6f60408301856127d5565b90508260208301529392505050565b6001600160e01b031991909116815260200190565b5f82612aad57634e487b7160e01b5f52601260045260245ffd5b500490565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81525f8351612ae38160178501602088016127b3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b148160288401602088016127b3565b01602801949350505050565b602081525f61182060208301846127d5565b634e487b7160e01b5f52603260045260245ffd5b5f81612b5457612b5461273e565b505f19019056fe8d24385f76974ce9574accf90a96cb183e175b097a0cdc49dd2ddd96f6374b72c9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12a264697066735822122087227fff4a191cd15526f8611bc168537eec8533569d41bca60fe468f5eccb8564736f6c634300081400338d24385f76974ce9574accf90a96cb183e175b097a0cdc49dd2ddd96f6374b72c9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12",
  "deployedBytecode": "0x608060405260043610610268575f3560e01c806356f9654b1161014a57806390d17f11116100be578063a796d4df11610078578063a796d4df1461085c578063a9b002031461087b578063ca54f8641461089a578063d547741f146108b9578063daece59c146108d8578063e8627e241461091c575f80fd5b806390d17f111461079c57806391d14854146107bb5780639f590b7b146107da578063a0f1e1fb146107f9578063a217fddf1461082a578063a3991cf21461083d575f80fd5b80637afb41411161010f5780637afb4141146106d457806386121de0146106e757806389ac88bf146107185780638d40b28c146107375780638fd478151461076857806390c2bd2214610787575f80fd5b806356f9654b146105f157806367c2e33f1461061057806368a806c41461062f5780636f81a8011461064e57806375cf559914610693575f80fd5b80631fd3ca77116101e1578063363cec32116101a6578063363cec321461050357806336568abe146105345780633cf35c7a14610553578063427069891461058757806342fbcce8146105a457806349b274ed146105c3575f80fd5b80631fd3ca7714610452578063248a9ca31461047157806328e04ddc146104a05780632f2ff15d146104b35780633255c49b146104d2575f80fd5b80630bece79c116102325780630bece79c1461038157806314a1c32d146103b2578063188e4681146103c75780631d130cd6146103e45780631dcd2d79146104055780631ec4242d14610433575f80fd5b806278eec61461026c578062d32e8c146102c657806301ffc9a7146102ff5780630888b6d01461032e5780630aaaf43d1461034d575b5f80fd5b348015610277575f80fd5b506102a6610286366004612560565b60096020525f908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b3480156102d1575f80fd5b506102f16102e0366004612560565b5f9081526020819052604090205490565b6040519081526020016102bd565b34801561030a575f80fd5b5061031e610319366004612577565b61093b565b60405190151581526020016102bd565b348015610339575f80fd5b506102f1610348366004612560565b61099b565b348015610358575f80fd5b506102f1610367366004612560565b5f9081526020819052604090205460101c63ffffffff1690565b34801561038c575f80fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016102bd565b3480156103bd575f80fd5b506102f160075481565b3480156103d2575f80fd5b506004546001600160a01b031661039a565b3480156103ef575f80fd5b506104036103fe366004612560565b610a16565b005b348015610410575f80fd5b506102f161041f366004612560565b5f9081526020819052604090205460f81c90565b34801561043e575f80fd5b5061040361044d366004612560565b610c5a565b34801561045d575f80fd5b5061031e61046c366004612560565b610ca9565b34801561047c575f80fd5b506102f161048b366004612560565b5f908152600160208190526040909120015490565b6104036104ae3660046125f7565b610ce3565b3480156104be575f80fd5b506104036104cd36600461265c565b6110f4565b3480156104dd575f80fd5b506102f16104ec366004612560565b5f9081526020819052604090205460501c600f1690565b34801561050e575f80fd5b506102f161051d366004612560565b5f9081526020819052604090205460041c600f1690565b34801561053f575f80fd5b5061040361054e36600461265c565b61111e565b34801561055e575f80fd5b506102f161056d366004612560565b5f9081526020819052604090205460301c63ffffffff1690565b348015610592575f80fd5b506003546001600160a01b031661039a565b3480156105af575f80fd5b506104036105be36600461268a565b61119d565b3480156105ce575f80fd5b506102f16105dd366004612560565b5f90815260208190526040902054600f1690565b3480156105fc575f80fd5b5061040361060b366004612560565b6111bd565b34801561061b575f80fd5b5061031e61062a366004612560565b6111e6565b34801561063a575f80fd5b5061040361064936600461268a565b611275565b348015610659575f80fd5b506102a66106683660046126a5565b600860209081525f928352604080842090915290825290208054600182015460029092015490919083565b34801561069e575f80fd5b506102f16106ad3660046126a5565b6001600160a01b03919091165f908152600860209081526040808320938352929052205490565b6104036106e23660046126cf565b6112af565b3480156106f2575f80fd5b506102f1610701366004612560565b5f9081526020819052604090205460f01c60ff1690565b348015610723575f80fd5b50610403610732366004612560565b6117be565b348015610742575f80fd5b506102f1610751366004612560565b5f9081526020819052604090205460081c60ff1690565b348015610773575f80fd5b506102f16107823660046126a5565b6117ef565b348015610792575f80fd5b506102f160055481565b3480156107a7575f80fd5b506104036107b636600461268a565b611827565b3480156107c6575f80fd5b5061031e6107d536600461265c565b611861565b3480156107e5575f80fd5b506102f16107f436600461271e565b61188b565b348015610804575f80fd5b506102f1610813366004612560565b5f9081526020819052604090205460541c60ff1690565b348015610835575f80fd5b506102f15f81565b348015610848575f80fd5b506102f1610857366004612560565b6118d0565b348015610867575f80fd5b506102f1610876366004612560565b6118fb565b348015610886575f80fd5b50610403610895366004612560565b611917565b3480156108a5575f80fd5b506104036108b4366004612560565b611963565b3480156108c4575f80fd5b506104036108d336600461265c565b611a01565b3480156108e3575f80fd5b5061031e6108f23660046126a5565b6001600160a01b03919091165f908152600660209081526040808320938352929052205460ff1690565b348015610927575f80fd5b5061031e610936366004612560565b611a26565b5f635be1e2f560e11b6001600160e01b03198316148061096b5750634a23979d60e01b6001600160e01b03198316145b80610986575063f83e032d60e01b6001600160e01b03198316145b80610995575061099582611a5c565b92915050565b6004545f906001600160a01b031663bd85b0396109b9846002612752565b6040518263ffffffff1660e01b81526004016109d791815260200190565b602060405180830381865afa1580156109f2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109959190612769565b5f80516020612b5c833981519152610a2d81611a90565b610a3682611a26565b610a8657610a6d60405180604001604052806011815260200170496e616374697665206c6f616e3a20257360781b81525083611a9a565b6040516390f54c8560e01b815260040160405180910390fd5b610a8f826111e6565b15610ae057610ac86040518060400160405280601281526020017144656661756c746564206c6f616e3a20257360701b81525083611a9a565b610ad182611adf565b610adc826007611b77565b5050565b6004545f906001600160a01b031663bd85b039610afe856002612752565b6040518263ffffffff1660e01b8152600401610b1c91815260200190565b602060405180830381865afa158015610b37573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5b9190612769565b11610b9a57610b8f6040518060400160405280600d81526020016c50616964206c6f616e3a20257360981b81525083611a9a565b610adc82600d611b77565b5f82815260208190526040902054600690600f1603610bed57610be46040518060400160405280600f81526020016e416374697665206c6f616e3a20257360881b81525083611a9a565b610adc82611adf565b610c11825f81815260208190526040812054429060101c63ffffffff161192915050565b610adc57610c4f60405180604001604052806018815260200177477261636520706572696f6420657870697265643a20257360401b81525083611a9a565b610be4826006611b77565b335f818152600660209081526040808320858452909152808220805460ff19166001179055518392917f642abefd8ba8508271dc240574875c4b7af73ff6b2a5c0cc6ba41e8b86b6375c91a350565b5f81815260208190526040812054600790600f161015801561099557505f82815260208190526040902054600a90600f165b111592915050565b5f610ced42611be7565b905034610cfb878383611c4f565b6040516331a9108f60e11b81526004810186905286905f906001600160a01b03831690636352211e90602401602060405180830381865afa158015610d42573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d669190612780565b6001600160a01b0389165f9081526008602090815260408083208b84529091528120600780549394509092909190610d9d9061279b565b919050819055815f0181905550610e02848b8b8b856001015f8154610dc19061279b565b9190508190558c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611e5392505050565b6001600160a01b0316826001600160a01b0316141580610e2a57506001600160a01b03821633145b15610e48576040516350a2e21f60e11b815260040160405180910390fd5b610e53855f8c611f73565b826001600160a01b031663b88d4fde8360025f9054906101000a90046001600160a01b03168b600754604051602001610e8e91815260200190565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610ebc9493929190612800565b5f604051808303815f87803b158015610ed3575f80fd5b505af1158015610ee5573d5f803e3d5ffd5b50506003546040516001600160a01b0386811660248301525f94509091169150869060440160408051601f198184030181529181526020820180516001600160e01b031663919747fb60e01b17905251610f3f919061283c565b5f6040518083038185875af1925050503d805f8114610f79576040519150601f19603f3d011682016040523d82523d5f602084013e610f7e565b606091505b5050905080610fa05760405163176bfe0760e11b815260040160405180910390fd5b6004546007546001600160a01b039091169063a4b645eb903390610fc5906002612752565b60405163c87b56dd60e01b8152600481018e905289906001600160a01b038a169063c87b56dd906024015f60405180830381865afa158015611009573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611030919081019061286b565b600754604051611044918b91602001612913565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611073959493929190612935565b5f604051808303815f87803b15801561108a575f80fd5b505af115801561109c573d5f803e3d5ffd5b50505050600754898b6001600160a01b03167f4929ac7ab6cc744fb93574c8b1e020e958956a560825577596e1f098760b54725f6040516110df91815260200190565b60405180910390a45050505050505050505050565b5f828152600160208190526040909120015461110f81611a90565b6111198383611fa4565b505050565b6001600160a01b03811633146111935760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610adc8282611fcb565b5f80516020612b7c8339815191526111b481611a90565b610adc82612031565b6111c681611a26565b6111e3576040516390f54c8560e01b815260040160405180910390fd5b50565b6004545f9081906001600160a01b031663bd85b039611206856002612752565b6040518263ffffffff1660e01b815260040161122491815260200190565b602060405180830381865afa15801561123f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112639190612769565b118015610995575042610cdb836118d0565b5f80516020612b7c83398151915261128c81611a90565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6112b883610ca9565b156112d6576040516368f7a67560e11b815260040160405180910390fd5b5f6112e042611be7565b9050346112ee868383611c4f565b6002546040516302a62a4960e41b8152600481018790526001600160a01b03909116905f908290632a62a49090602401606060405180830381865afa158015611339573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061135d9190612993565b80516001600160a01b03165f908152600860209081526040808320828501518452825280832080548085526009909352908320918255600180820154908301556002808201549201919091556007805493945090929091906113be9061279b565b918290555081556002810180545f906113d69061279b565b919050819055505f61143d858b855f01518660200151866001015f81546113fc9061279b565b9190508190558d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611e5392505050565b6004805460405163163be8c160e11b81526001600160a01b0380851693820193909352602481018d90529293501690632c77d18290604401602060405180830381865afa158015611490573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114b491906129f8565b15806114c857506001600160a01b03811633145b156114e6576040516350a2e21f60e11b815260040160405180910390fd5b6114f58683600201548c611f73565b82516020840151600754604051639fea3e0760e01b81526001600160a01b0393841660048201526024810192909252604482015290851690639fea3e07906064015f604051808303815f87803b15801561154d575f80fd5b505af115801561155f573d5f803e3d5ffd5b505050505f61156d8a61099b565b6003549091505f906001600160a01b03168288101561158c578761158e565b825b6040516001600160a01b0386166024820152604481018e905260640160408051601f198184030181529181526020820180516001600160e01b03166386cd0a4760e01b179052516115df919061283c565b5f6040518083038185875af1925050503d805f8114611619576040519150601f19603f3d011682016040523d82523d5f602084013e61161e565b606091505b50509050806116405760405163176bfe0760e11b815260040160405180910390fd5b6004546007546001600160a01b039091169063a4b645eb903390611665906002612752565b885160208a015160405163c87b56dd60e01b815260048101919091528c916001600160a01b03169063c87b56dd906024015f60405180830381865afa1580156116b0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526116d7919081019061286b565b6007546040516116eb918b91602001612913565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161171a959493929190612935565b5f604051808303815f87803b158015611731575f80fd5b505af1158015611743573d5f803e3d5ffd5b505050506007548560200151865f01516001600160a01b03167f4929ac7ab6cc744fb93574c8b1e020e958956a560825577596e1f098760b5472876002015460405161179191815260200190565b60405180910390a4600160075f8282546117ab9190612a11565b9091555050505050505050505050505050565b5f80516020612b7c8339815191526117d581611a90565b60ff8211156117e6576107d86117e8565b815b6005555050565b6001600160a01b0382165f908152600860209081526040808320848452909152812060019081015461182091612a11565b9392505050565b5f80516020612b7c83398151915261183e81611a90565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b5f9182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b5f82815260208190526040812054600481901c600f169060301c63ffffffff16808411156118b957806118bb565b835b93506118c7828561208e565b95945050505050565b5f90815260208190526040902054601081901c63ffffffff90811660309290921c8116919091011690565b5f8181526020819052604081205460101c63ffffffff16610995565b335f818152600660209081526040808320858452909152808220805460ff19169055518392917f5f3183bf1fbf3f9aa30f91fa5c2b16851dd6aa63f139d14fd51477b250eb821791a350565b60045433906001600160a01b031663a4b645eb82611982856002612752565b61198d906001612a11565b600185876040516020016119a2929190612913565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016119d09493929190612a24565b5f604051808303815f87803b1580156119e7575f80fd5b505af11580156119f9573d5f803e3d5ffd5b505050505050565b5f8281526001602081905260409091200154611a1c81611a90565b6111198383611fcb565b5f81815260208190526040812054600590600f161015801561099557505f82815260208190526040902054600690600f16610cdb565b5f6001600160e01b03198216637965db0b60e01b148061099557506301ffc9a760e01b6001600160e01b0319831614610995565b6111e38133612167565b610adc8282604051602401611ab0929190612a5d565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526121c0565b5f81815260208190526040902054600f81166006811115611afe575f80fd5b50806020528063ffffffff60301b1660301c8165ffffffff00001660101c014281811115611b295750805b602080515f95865290859052604090942063ffffffff60301b1965ffffffff00001990951665ffffffff0000601084901b16189490941663ffffffff60301b9190920360301b161890915550565b5f82815260208190526040902054600f8116828103611b94575f80fd5b5f84815260208190526040808220600f19909416600f861618938490555160ff808416929086169187917f361d0bb4f0b625387fc860030dd8ba1ec262c62d85ec5ded355aa4e43e63296491a450505050565b5f63ffffffff821115611c4b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161118a565b5090565b601f8390525f8051601b85905281516017869052825160138790528351600188905284519488905292939192909187606460ff87161115611cac576040516343f591d960e11b815261118a9063ecc752dd60e01b90600401612a7e565b6105a08563ffffffff161015611cde576040516343f591d960e11b815261118a906319ec869760e21b90600401612a7e565b63ffffffff84161580611cfe575063ffffffff8881168582160184821601115b15611d25576040516343f591d960e11b815261118a9063fcbf851160e01b90600401612a7e565b865f03611d4e576040516343f591d960e11b815261118a90636a90143560e01b90600401612a7e565b600f8160ff161115611d7c576040516343f591d960e11b815261118a90631427d12960e31b90600401612a7e565b73__$7ff1827adbcc406cbe9f732ad7b1b7248b$__636d8866f18884611dab8560ff168963ffffffff1661208e565b6040516001600160e01b031960e086901b168152600481019390935260ff90911660248301526044820152606401602060405180830381865af4925050508015611e12575060408051601f3d908101601f19168201909252611e0f91810190612769565b60015b611e465760ff811615611e41576040516343f591d960e11b815261118a90638fe03ac360e01b90600401612a7e565b611e48565b505b505050505050505050565b6040805160208082018990528183018890526001600160a01b03871660608301526080820186905260a08083018690528351808403909101815260c0830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060e084015260fc808401919091528351808403909101815261011c90920190925280519101205f905f805f611f0186602081015160408201516060909201515f1a92909190565b604080515f81526020810180835289905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015611f59573d5f803e3d5ffd5b5050604051601f1901519c9b505050505050505050505050565b600554821115611f9657604051630c5eb3e760e21b815260040160405180910390fd5b6111198360075484846121e0565b5f80516020612b5c8339815191528214611fc257610adc828261234e565b610adc81612031565b611fd58282611861565b15610adc575f8281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600354612055905f80516020612b5c833981519152906001600160a01b0316611fcb565b61206c5f80516020612b5c8339815191528261234e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b5f825f0361209d575080610995565b826001036120b7576120b0603c83612a93565b9050610995565b826002036120cb576120b0610e1083612a93565b826003036120e0576120b06201518083612a93565b826004036120f5576120b062093a8083612a93565b8260050361210a576120b06212750083612a93565b8260060361211f576120b06224ea0083612a93565b82600703612134576120b062375f0083612a93565b82600803612149576120b06249d40083612a93565b82600e0361215f576120b06301da9c0083612a93565b505f92915050565b6121718282611861565b610adc5761217e816123b8565b6121898360206123ca565b60405160200161219a929190612ab2565b60408051601f198184030181529082905262461bcd60e51b825261118a91600401612b20565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f816001525f518260025260ff5f5116836013525f51846017525f5185601f525f518660041b602052825f81146122235760208051600f19166005189052612231565b60208051600f191660061890525b508460081b61ff001660205161ff00191618602052828a0160101b65ffffffff00001660205165ffffffff00001916186020528160301b63ffffffff60301b1660205163ffffffff60301b19161860205260648411600181146122995780156122c9576122e4565b6020805160ff60541b19600f60501b19909116600160501b181660ff60541b606419880160541b161890526122e4565b60208051610fff60501b191660ff60541b605488901b161890525b508060f01b60ff60f01b1660205160ff60f01b19161860205250505050508260f81b6001600160f81b0319166020516001600160f81b0316186020526020516001605c1b600160f01b0319169050805f808681526020019081526020015f20819055505050505050565b6123588282611861565b610adc575f8281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60606109956001600160a01b03831660145b60605f6123d8836002612752565b6123e3906002612a11565b67ffffffffffffffff8111156123fb576123fb612857565b6040519080825280601f01601f191660200182016040528015612425576020820181803683370190505b509050600360fc1b815f8151811061243f5761243f612b32565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061246d5761246d612b32565b60200101906001600160f81b03191690815f1a9053505f61248f846002612752565b61249a906001612a11565b90505b6001811115612511576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124ce576124ce612b32565b1a60f81b8282815181106124e4576124e4612b32565b60200101906001600160f81b03191690815f1a90535060049490941c9361250a81612b46565b905061249d565b5083156118205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161118a565b5f60208284031215612570575f80fd5b5035919050565b5f60208284031215612587575f80fd5b81356001600160e01b031981168114611820575f80fd5b6001600160a01b03811681146111e3575f80fd5b5f8083601f8401126125c2575f80fd5b50813567ffffffffffffffff8111156125d9575f80fd5b6020830191508360208285010111156125f0575f80fd5b9250929050565b5f805f805f6080868803121561260b575f80fd5b85359450602086013561261d8161259e565b935060408601359250606086013567ffffffffffffffff81111561263f575f80fd5b61264b888289016125b2565b969995985093965092949392505050565b5f806040838503121561266d575f80fd5b82359150602083013561267f8161259e565b809150509250929050565b5f6020828403121561269a575f80fd5b81356118208161259e565b5f80604083850312156126b6575f80fd5b82356126c18161259e565b946020939093013593505050565b5f805f80606085870312156126e2575f80fd5b8435935060208501359250604085013567ffffffffffffffff811115612706575f80fd5b612712878288016125b2565b95989497509550505050565b5f806040838503121561272f575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176109955761099561273e565b5f60208284031215612779575f80fd5b5051919050565b5f60208284031215612790575f80fd5b81516118208161259e565b5f600182016127ac576127ac61273e565b5060010190565b5f5b838110156127cd5781810151838201526020016127b5565b50505f910152565b5f81518084526127ec8160208601602086016127b3565b601f01601f19169290920160200192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612832908301846127d5565b9695505050505050565b5f825161284d8184602087016127b3565b9190910192915050565b634e487b7160e01b5f52604160045260245ffd5b5f6020828403121561287b575f80fd5b815167ffffffffffffffff80821115612892575f80fd5b818401915084601f8301126128a5575f80fd5b8151818111156128b7576128b7612857565b604051601f8201601f19908116603f011681019083821181831017156128df576128df612857565b816040528281528760208487010111156128f7575f80fd5b6129088360208301602088016127b3565b979650505050505050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60018060a01b038616815284602082015283604082015260a060608201525f61296160a08301856127d5565b828103608084015261297381856127d5565b98975050505050505050565b8051801515811461298e575f80fd5b919050565b5f606082840312156129a3575f80fd5b6040516060810181811067ffffffffffffffff821117156129c6576129c6612857565b60405282516129d48161259e565b8152602083810151908201526129ec6040840161297f565b60408201529392505050565b5f60208284031215612a08575f80fd5b6118208261297f565b808201808211156109955761099561273e565b60018060a01b038516815283602082015282604082015260a060608201525f60a082015260c060808201525f61283260c08301846127d5565b604081525f612a6f60408301856127d5565b90508260208301529392505050565b6001600160e01b031991909116815260200190565b5f82612aad57634e487b7160e01b5f52601260045260245ffd5b500490565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81525f8351612ae38160178501602088016127b3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b148160288401602088016127b3565b01602801949350505050565b602081525f61182060208301846127d5565b634e487b7160e01b5f52603260045260245ffd5b5f81612b5457612b5461273e565b505f19019056fe8d24385f76974ce9574accf90a96cb183e175b097a0cdc49dd2ddd96f6374b72c9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12a264697066735822122087227fff4a191cd15526f8611bc168537eec8533569d41bca60fe468f5eccb8564736f6c63430008140033",
  "libraries": {
    "LibLoanContractInterest": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6"
  },
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14271,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "__packedDebtTerms",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 24,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 24266,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "_collateralVault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 24268,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "_loanTreasurer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 24271,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "_anzaToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAnzaToken)25516"
      },
      {
        "astId": 15379,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "maxRefinances",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15385,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "__revokedTerms",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 14869,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "totalDebts",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14876,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "debts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Debt)25718_storage))"
      },
      {
        "astId": 14881,
        "contract": "contracts/LoanContract.sol:LoanContract",
        "label": "debtIdBranch",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Debt)25718_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAnzaToken)25516": {
        "encoding": "inplace",
        "label": "contract IAnzaToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Debt)25718_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ILoanContract.Debt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Debt)25718_storage)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Debt)25718_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILoanContract.Debt)",
        "numberOfBytes": "32",
        "value": "t_struct(Debt)25718_storage"
      },
      "t_struct(Debt)25718_storage": {
        "encoding": "inplace",
        "label": "struct ILoanContract.Debt",
        "members": [
          {
            "astId": 25713,
            "contract": "contracts/LoanContract.sol:LoanContract",
            "label": "debtId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25715,
            "contract": "contracts/LoanContract.sol:LoanContract",
            "label": "collateralNonce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25717,
            "contract": "contracts/LoanContract.sol:LoanContract",
            "label": "activeLoanIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LoanContract.sol:LoanContract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LoanContract.sol:LoanContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}