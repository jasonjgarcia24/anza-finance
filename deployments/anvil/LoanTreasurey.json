{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InactiveLoanState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundsTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLoanState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParticipant",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anzaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "depositPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_purchaser",
          "type": "address"
        }
      ],
      "name": "executeDebtPurchase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_results",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "getDebtBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anzaTokenAddress",
          "type": "address"
        }
      ],
      "name": "setAnzaToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralVaultAddress",
          "type": "address"
        }
      ],
      "name": "setCollateralVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContractAddress",
          "type": "address"
        }
      ],
      "name": "setLoanContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "sponsorPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "updateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x797a17709bc1a8d1090763acc6c1c614632325197a6b839deb3d7d1a3bee64e4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "transactionIndex": 0,
    "gasUsed": "1792276",
    "logsBloom": "0x
    "blockHash": "0xfa714d9649a8c7b568efe2cc87c370019e8d16b5f246534b93bd845b1a9f9161",
    "transactionHash": "0x797a17709bc1a8d1090763acc6c1c614632325197a6b839deb3d7d1a3bee64e4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x797a17709bc1a8d1090763acc6c1c614632325197a6b839deb3d7d1a3bee64e4",
        "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfa714d9649a8c7b568efe2cc87c370019e8d16b5f246534b93bd845b1a9f9161"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x797a17709bc1a8d1090763acc6c1c614632325197a6b839deb3d7d1a3bee64e4",
        "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xaca95a87ebdd693d0a3734440ea0ab66d6317f6d32766e386292131defadde1a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfa714d9649a8c7b568efe2cc87c370019e8d16b5f246534b93bd845b1a9f9161"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x797a17709bc1a8d1090763acc6c1c614632325197a6b839deb3d7d1a3bee64e4",
        "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x6ff243dd0433898c62e5507995453d38065c2abe8d8faf3cc448711da30c566a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xfa714d9649a8c7b568efe2cc87c370019e8d16b5f246534b93bd845b1a9f9161"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x797a17709bc1a8d1090763acc6c1c614632325197a6b839deb3d7d1a3bee64e4",
        "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xfa714d9649a8c7b568efe2cc87c370019e8d16b5f246534b93bd845b1a9f9161"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "1792276",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6026b98393f52c3678e3a85d9b556f4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InactiveLoanState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundsTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLoanState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParticipant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anzaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"depositPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"executeDebtPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_results\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"getDebtBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anzaTokenAddress\",\"type\":\"address\"}],\"name\":\"setAnzaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralVaultAddress\",\"type\":\"address\"}],\"name\":\"setCollateralVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContractAddress\",\"type\":\"address\"}],\"name\":\"setLoanContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"sponsorPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"updateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanTreasurey.sol\":\"LoanTreasurey\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LoanTreasurey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./domain/LoanContractFIRIntervals.sol\\\";\\nimport \\\"./domain/LoanContractRoles.sol\\\";\\nimport \\\"./domain/LoanContractStates.sol\\\";\\n\\nimport \\\"./interfaces/ILoanTreasurey.sol\\\";\\nimport \\\"./access/TreasureyAccessController.sol\\\";\\nimport {LibLoanContractInterest as Interest} from \\\"./libraries/LibLoanContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract LoanTreasurey is\\n    ILoanTreasurey,\\n    TreasureyAccessController,\\n    ReentrancyGuard\\n{\\n    using Address for address payable;\\n\\n    uint256 public poolBalance;\\n    mapping(address => uint256) public withdrawableBalance;\\n\\n    constructor() TreasureyAccessController() {}\\n\\n    modifier debtUpdater(uint256 _debtId) {\\n        updateDebt(_debtId);\\n        if (!_loanManager.checkLoanExpired(_debtId)) {\\n            _;\\n            _loanManager.updateLoanState(_debtId);\\n        }\\n    }\\n\\n    modifier onlyActiveLoan(uint256 _debtId) {\\n        _loanManager.verifyLoanActive(_debtId);\\n        _;\\n    }\\n\\n    function getDebtBalanceOf(uint256 _debtId) external view returns (uint256) {\\n        return _anzaToken.totalSupply(_debtId * 2);\\n    }\\n\\n    function depositFunds(\\n        address _account\\n    ) external payable onlyRole(_LOAN_CONTRACT_) nonReentrant {\\n        withdrawableBalance[_account] += msg.value;\\n\\n        emit Deposited(type(uint256).max, _account, msg.value);\\n    }\\n\\n    function sponsorPayment(\\n        address _sponsor,\\n        uint256 _debtId\\n    ) external payable onlyActiveLoan(_debtId) debtUpdater(_debtId) {\\n        uint256 _payment = msg.value;\\n\\n        // Overpayments checked when burning lender debt tokens.\\n        // Therefore, no need to check here.\\n        if (_payment == 0) revert InvalidFundsTransfer();\\n\\n        _depositPayment(_sponsor, _debtId, _payment);\\n\\n        emit Deposited(_debtId, _sponsor, _payment);\\n    }\\n\\n    function depositPayment(\\n        uint256 _debtId\\n    ) external payable onlyActiveLoan(_debtId) debtUpdater(_debtId) {\\n        address _borrower = msg.sender;\\n        uint256 _payment = msg.value;\\n\\n        // Overpayments checked when burning lender debt tokens.\\n        // Therefore, no need to check here.\\n        if (_payment == 0) revert InvalidFundsTransfer();\\n\\n        if (!_anzaToken.checkBorrowerOf(_borrower, _debtId))\\n            revert InvalidParticipant();\\n\\n        _depositPayment(_borrower, _debtId, _payment);\\n\\n        emit Deposited(_debtId, _borrower, _payment);\\n    }\\n\\n    function withdrawFromBalance(\\n        uint256 _amount\\n    ) external nonReentrant returns (bool) {\\n        address _payee = msg.sender;\\n\\n        if (_amount == 0) revert InvalidFundsTransfer();\\n\\n        // Update lender's withdrawable balance. Will revert\\n        // with arithmetic underflow should amount be greater\\n        // than withdrawable balance.\\n        withdrawableBalance[_payee] -= _amount;\\n\\n        // Transfer payment funds to lender\\n        (bool _success, ) = _payee.call{value: _amount}(\\\"\\\");\\n        require(_success);\\n\\n        emit Withdrawn(_payee, _amount);\\n\\n        return _success;\\n    }\\n\\n    function withdrawCollateral(uint256 _debtId) external returns (bool) {\\n        return _loanCollateralVault.withdraw(msg.sender, _debtId);\\n    }\\n\\n    /*\\n     * A full transfer of debt responsibilities of the current borrower\\n     * to the purchaser.\\n     *\\n     * Scenario #1:\\n     *   Should the payment cover the cost of the debt, the payment less\\n     *   the excess funds is used to close out the loan, the excess funds\\n     *   from the payment, if any, will be transferred to the borrower's\\n     *   account and the purchaser will be able to withdraw the collateral\\n     *   to their account.\\n     *\\n     * Scenario #2:\\n     *   Should the payment not cover the entirety of the debt, the\\n     *   payment is applied directly to the loan, the borrower's withdrawable\\n     *   balance remains unchanged, and the purchaser will become the\\n     *   loan's borrower.\\n     */\\n    function executeDebtPurchase(\\n        uint256 _debtId,\\n        address _borrower,\\n        address _purchaser\\n    )\\n        external\\n        payable\\n        onlyRole(_DEBT_STOREFRONT_)\\n        onlyActiveLoan(_debtId)\\n        debtUpdater(_debtId)\\n        returns (bool _results)\\n    {\\n        uint256 _balance = _loanContract.debtBalanceOf(_debtId);\\n        uint256 _payment = msg.value;\\n\\n        // Transfer collateral\\n        if (_payment >= _balance) {\\n            _depositPayment(_purchaser, _debtId, _balance);\\n\\n            _loanCollateralVault.withdraw(_purchaser, _debtId);\\n\\n            withdrawableBalance[_borrower] += _payment - _balance;\\n        }\\n        // Transfer debt\\n        else {\\n            _depositPayment(_purchaser, _debtId, _payment);\\n\\n            _anzaToken.anzaTransferFrom(_borrower, _purchaser, _debtId, \\\"\\\");\\n        }\\n\\n        _results = true;\\n    }\\n\\n    // TODO: Need to revisit to ensure accuracy at larger total debt values\\n    // (e.g. 10000 * 10**18).\\n    function updateDebt(uint256 _debtId) public {\\n        uint256 _prevCheck = _loanCodec.loanLastChecked(_debtId);\\n\\n        // Find time intervals passed\\n        _loanManager.updateLoanState(_debtId);\\n\\n        uint256 _firIntervals = _loanCodec.totalFirIntervals(\\n            _debtId,\\n            _loanCodec.loanLastChecked(_debtId) - _prevCheck\\n        );\\n\\n        // Update debt\\n        if (_firIntervals > 0) {\\n            uint256 _totalDebt = _anzaToken.totalSupply(_debtId * 2);\\n\\n            uint256 _updatedDebt = Interest.compoundWithTopoff(\\n                _totalDebt,\\n                _loanCodec.fixedInterestRate(_debtId),\\n                _firIntervals\\n            );\\n\\n            _anzaToken.mint(_debtId, _updatedDebt - _totalDebt);\\n        }\\n    }\\n\\n    function _depositPayment(\\n        address _payer,\\n        uint256 _debtId,\\n        uint256 _payment\\n    ) internal {\\n        address _lender = _anzaToken.lenderOf(_debtId);\\n        uint256 _balance = _anzaToken.balanceOf(_lender, _debtId * 2);\\n\\n        // Update lender's withdrawable balance\\n        if (_balance > _payment) {\\n            withdrawableBalance[_lender] += _payment;\\n\\n            // Burn ALC debt token\\n            _anzaToken.burn(_lender, _debtId * 2, _payment);\\n        } else {\\n            withdrawableBalance[_lender] += _balance;\\n            withdrawableBalance[_payer] += _payment - _balance;\\n\\n            // Burn ALC debt token\\n            _anzaToken.burn(_lender, _debtId * 2, _balance);\\n        }\\n\\n        // Conditionally burn replica\\n        if (!_loanManager.checkLoanActive(_debtId)) {\\n            _anzaToken.burnBorrowerToken(_debtId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec2dd7a10141f3f57d8fd98a53797f916e0bdc59a0c7aef62344c672794b1fc6\",\"license\":\"MIT\"},\"contracts/abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64, \\\"fail\\\");\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                        y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(\\n                        absoluteResult <=\\n                            0x8000000000000000000000000000000000000000000000000000000000000000\\n                    );\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(\\n                        absoluteResult <=\\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                    );\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) *\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(\\n                hi <=\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n                        lo\\n            );\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(\\n                m <\\n                    0x4000000000000000000000000000000000000000000000000000000000000000\\n            );\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = (absX * absX) >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return\\n                int128(\\n                    int256(\\n                        (uint256(int256(log_2(x))) *\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0)\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0)\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0)\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0)\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0)\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0)\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0)\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0)\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0)\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0)\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0)\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0)\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0)\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0)\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0)\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0)\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0)\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0)\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0)\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0)\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0)\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0)\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0)\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0)\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0)\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0)\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0)\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0)\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0)\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0)\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0)\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0)\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0)\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0)\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0)\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0)\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return\\n                exp_2(\\n                    int128(\\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                result += xh == hi >> 128 ? xl / y : 1;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) return 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x4) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea2ccc9d587551e1c92fe89efcca4e5376395bc43dd098865075f18fa6f09bd\",\"license\":\"BSD-4-Clause\"},\"contracts/access/TreasureyAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../domain/LoanContractRoles.sol\\\";\\n\\nimport \\\"../interfaces/ITreasureyAccessController.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract TreasureyAccessController is\\n    ITreasureyAccessController,\\n    AccessControl\\n{\\n    ILoanContract internal _loanContract;\\n    ILoanCodec internal _loanCodec;\\n    ILoanManager internal _loanManager;\\n    ICollateralVault internal _loanCollateralVault;\\n    IAnzaToken internal _anzaToken;\\n\\n    constructor() {\\n        _setRoleAdmin(_ADMIN_, _ADMIN_);\\n        _setRoleAdmin(_LOAN_CONTRACT_, _ADMIN_);\\n        _setRoleAdmin(_DEBT_STOREFRONT_, _ADMIN_);\\n\\n        _grantRole(_ADMIN_, msg.sender);\\n    }\\n\\n    function anzaToken() external view returns (address) {\\n        return address(_anzaToken);\\n    }\\n\\n    function loanContract() external view returns (address) {\\n        return address(_loanContract);\\n    }\\n\\n    function collateralVault() external view returns (address) {\\n        return address(_loanCollateralVault);\\n    }\\n\\n    function setAnzaToken(\\n        address _anzaTokenAddress\\n    ) external onlyRole(_ADMIN_) {\\n        _anzaToken = IAnzaToken(_anzaTokenAddress);\\n    }\\n\\n    function setLoanContract(\\n        address _loanContractAddress\\n    ) external onlyRole(_ADMIN_) {\\n        __setLoanContract(_loanContractAddress);\\n    }\\n\\n    function setCollateralVault(\\n        address _collateralVaultAddress\\n    ) external onlyRole(_ADMIN_) {\\n        _loanCollateralVault = ICollateralVault(_collateralVaultAddress);\\n    }\\n\\n    function _grantRole(\\n        bytes32 _role,\\n        address _account\\n    ) internal virtual override {\\n        if (_role == _LOAN_CONTRACT_) {\\n            __setLoanContract(_account);\\n        } else {\\n            super._grantRole(_role, _account);\\n        }\\n    }\\n\\n    function __setLoanContract(address _loanContractAddress) private {\\n        _revokeRole(_LOAN_CONTRACT_, address(_loanContract));\\n        super._grantRole(_LOAN_CONTRACT_, _loanContractAddress);\\n\\n        _loanContract = ILoanContract(_loanContractAddress);\\n        _loanCodec = ILoanCodec(_loanContractAddress);\\n        _loanManager = ILoanManager(_loanContractAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x69bfc19ccfc5288559337cbe4183ffcb2fffbd145dfcfe0fba2e5b29004fd313\",\"license\":\"MIT\"},\"contracts/domain/LoanContractFIRIntervals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *       Fixed Interest Rate (FIR) Intervals        *\\n * ------------------------------------------------ */\\n//  Need to validate duration > FIR interval\\nuint8 constant _SECONDLY_ = 0;\\nuint8 constant _MINUTELY_ = 1;\\nuint8 constant _HOURLY_ = 2;\\nuint8 constant _DAILY_ = 3;\\nuint8 constant _WEEKLY_ = 4;\\nuint8 constant _2_WEEKLY_ = 5;\\nuint8 constant _4_WEEKLY_ = 6;\\nuint8 constant _6_WEEKLY_ = 7;\\nuint8 constant _8_WEEKLY_ = 8;\\nuint8 constant _MONTHLY_ = 9;\\nuint8 constant _2_MONTHLY_ = 10;\\nuint8 constant _3_MONTHLY_ = 11;\\nuint8 constant _4_MONTHLY_ = 12;\\nuint8 constant _6_MONTHLY_ = 13;\\nuint8 constant _360_DAILY_ = 14;\\nuint8 constant _ANNUALLY_ = 15;\\n\\n/* ------------------------------------------------ *\\n *               FIR Interval Multipliers           *\\n * ------------------------------------------------ */\\nuint256 constant _SECONDLY_MULTIPLIER_ = 1;\\nuint256 constant _MINUTELY_MULTIPLIER_ = 60;\\nuint256 constant _HOURLY_MULTIPLIER_ = 60 * 60;\\nuint256 constant _DAILY_MULTIPLIER_ = 60 * 60 * 24;\\nuint256 constant _WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7;\\nuint256 constant _2_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 2;\\nuint256 constant _4_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 4;\\nuint256 constant _6_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 6;\\nuint256 constant _8_WEEKLY_MULTIPLIER_ = 60 * 60 * 24 * 7 * 8;\\nuint256 constant _360_DAILY_MULTIPLIER_ = 60 * 60 * 24 * 360;\\n\",\"keccak256\":\"0xff26ca73af5ce6b9cc6014706d189c58007f73731a32a59580fd9d1e02cb8027\",\"license\":\"MIT\"},\"contracts/domain/LoanContractRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *              Loan Contract Roles                 *\\n * ------------------------------------------------ */\\nbytes32 constant _ADMIN_ = keccak256(\\\"_ADMIN_\\\");\\nbytes32 constant _LOAN_CONTRACT_ = keccak256(\\\"_LOAN_CONTRACT_\\\");\\nbytes32 constant _TREASURER_ = keccak256(\\\"_TREASURER_\\\");\\nbytes32 constant _COLLECTOR_ = keccak256(\\\"_COLLECTOR_\\\");\\nbytes32 constant _DEBT_STOREFRONT_ = keccak256(\\\"_DEBT_STOREFRONT_\\\");\\n\\n\",\"keccak256\":\"0xcc4c0a9996c576747d5a3a42503130e2b8760de3311599ad976180499c51d711\",\"license\":\"MIT\"},\"contracts/domain/LoanContractStates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *                  Loan States                     *\\n * ------------------------------------------------ */\\nuint8 constant _UNDEFINED_STATE_ = 0;\\nuint8 constant _NONLEVERAGED_STATE_ = 1;\\nuint8 constant _UNSPONSORED_STATE_ = 2;\\nuint8 constant _SPONSORED_STATE_ = 3;\\nuint8 constant _FUNDED_STATE_ = 4;\\nuint8 constant _ACTIVE_GRACE_STATE_ = 5;\\nuint8 constant _ACTIVE_STATE_ = 6;\\nuint8 constant _DEFAULT_STATE_ = 7;\\nuint8 constant _COLLECTION_STATE_ = 8;\\nuint8 constant _AUCTION_STATE_ = 9;\\nuint8 constant _AWARDED_STATE_ = 10;\\nuint8 constant _PAID_PENDING_STATE_ = 11;\\nuint8 constant _CLOSE_STATE_ = 12;\\nuint8 constant _PAID_STATE_ = 13;\\nuint8 constant _CLOSE_DEFAULT_STATE_ = 14;\\n\",\"keccak256\":\"0x2568dd05e31045e55e2618a877979fd263f71b4d82f9df38c6f93177a0c32855\",\"license\":\"MIT\"},\"contracts/domain/LoanContractTermMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/* ------------------------------------------------ *\\n *           Packed Debt Term Mappings              *\\n *-------------------------------------------*/\\nuint256 constant _LOAN_STATE_MASK_ =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0;\\nuint256 constant _LOAN_STATE_MAP_ =        0x000000000000000000000000000000000000000000000000000000000000000F;\\nuint256 constant _FIR_INTERVAL_MASK_ =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F;\\nuint256 constant _FIR_INTERVAL_MAP_ =      0x00000000000000000000000000000000000000000000000000000000000000F0;\\nuint256 constant _FIR_MASK_ =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF;\\nuint256 constant _FIR_MAP_ =               0x000000000000000000000000000000000000000000000000000000000000FF00;\\nuint256 constant _LOAN_START_MASK_ =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFF;\\nuint256 constant _LOAN_START_MAP_ =        0x0000000000000000000000000000000000000000000000000000FFFFFFFF0000;\\nuint256 constant _LOAN_DURATION_MASK_ =    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFF;\\nuint256 constant _LOAN_DURATION_MAP_ =     0x00000000000000000000000000000000000000000000FFFFFFFF000000000000;\\nuint256 constant _IS_FIXED_MASK_ =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _IS_FIXED_MAP_ =          0x0000000000000000000000000000000000000000000F00000000000000000000;\\nuint256 constant _COMMITAL_MASK_ =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _COMMITAL_MAP_ =          0x00000000000000000000000000000000000000000FF000000000000000000000;\\nuint256 constant _LENDER_ROYALTIES_MASK_ = 0xFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _LENDER_ROYALTIES_MAP_ =  0x00FF000000000000000000000000000000000000000000000000000000000000;\\nuint256 constant _LOAN_COUNT_MASK_ =       0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant _LOAN_COUNT_MAP_ =        0xFF00000000000000000000000000000000000000000000000000000000000000;\\nuint256 constant _CLEANUP_MASK_ =          0xFFFF0000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFF;\\n\\nuint8 constant _LOAN_STATE_POS_ = 0;\\nuint8 constant _FIR_INTERVAL_POS_ = 4;\\nuint8 constant _FIR_POS_ = 8;\\nuint8 constant _LOAN_START_POS_ = 16;\\nuint8 constant _LOAN_DURATION_POS_ = 48;\\nuint8 constant _IS_FIXED_POS_ = 80;\\nuint8 constant _COMMITAL_POS_ = 84;\\nuint8 constant _LENDER_ROYALTIES_POS_ = 240;\\nuint8 constant _LOAN_COUNT_POS_ = 248;\\n\",\"keccak256\":\"0x049c6fb78ce1cff66ec933608058fd25fe5568c40d6fdd5f3d9dc85670d08788\",\"license\":\"MIT\"},\"contracts/interfaces/IAnzaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAnzaToken is IAccessControl {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function anzaTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _debtId,\\n        bytes memory _data\\n    ) external;\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the borrower of a debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The borrower of the debt.\\n    function borrowerOf(uint256 _debtId) external view returns (address);\\n\\n    /// @notice Get the lender of a debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The lender of the debt.\\n    function lenderOf(uint256 _debtId) external view returns (address);\\n\\n    function checkBorrowerOf(\\n        address _account,\\n        uint256 _debtId\\n    ) external view returns (bool);\\n\\n    /// @notice Get the borrower token ID for a given debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The borrower token ID of the debt.\\n    function borrowerTokenId(uint256 _debtId) external pure returns (uint256);\\n\\n    /// @notice Get the lender token ID for a given debt.\\n    /// @param _debtId The debt ID of the loan.\\n    /// @return The lender token ID of the debt.\\n    function lenderTokenId(uint256 _debtId) external pure returns (uint256);\\n\\n    /// @dev Total amount of tokens in with a given id.\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n    /// - MUST revert if `_to` is the zero address.\\n    /// - MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n    /// - MUST revert on any other error.\\n    /// - MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// - After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// @param _from Source address\\n    /// @param _to Target address\\n    /// @param _id ID of the token type\\n    /// @param _amount Transfer amount\\n    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /// @param _debtId argument MUST be the debt ID for deriving token ID being transferred.\\n    /// @param _value argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n    function mint(uint256 _debtId, uint256 _value) external;\\n\\n    /// @param _to argument MUST be the address of the recipient whose balance is increased.\\n    /// @param _id argument MUST be the token ID being transferred.\\n    /// @param _value argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        string calldata _collateralURI,\\n        bytes memory _data\\n    ) external;\\n\\n    /// @param _account argument MUST be the address of the owner/operator whose balance is decreased.\\n    /// @param _id argument MUST be the token being burned.\\n    /// @param _value argument MUST be the number of tokens the holder balance is decreased by.\\n    function burn(address _account, uint256 _id, uint256 _value) external;\\n\\n    function burnBatch(\\n        address _account,\\n        uint256[] memory _ids,\\n        uint256[] memory _values\\n    ) external;\\n\\n    function burnBorrowerToken(uint256 _debtId) external;\\n}\\n\",\"keccak256\":\"0x6677d692b27c2fcebd4bf593eb642137907edd9478e0b57d927b53ad69c2c7fc\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICollateralVault {\\n    error UnallowedDeposit();\\n    error UnallowedWithdrawal();\\n    error IllegalDebtId();\\n\\n    event DepositedCollateral(\\n        address indexed from,\\n        address indexed collateralAddress,\\n        uint256 indexed collateralId\\n    );\\n\\n    event WithdrawnCollateral(\\n        address indexed to,\\n        address indexed collateralAddress,\\n        uint256 indexed collateralId\\n    );\\n\\n    struct Collateral {\\n        address collateralAddress;\\n        uint256 collateralId;\\n        bool vault;\\n    }\\n\\n    function totalCollateral() external view returns (uint256);\\n\\n    function getCollateral(\\n        uint256 _debtId\\n    ) external view returns (Collateral memory);\\n\\n    function setCollateral(\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _debtId\\n    ) external;\\n\\n    function depositAllowed(\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _debtId\\n    ) external returns (bool);\\n\\n    function withdrawalAllowed(\\n        address _to,\\n        uint256 _debtId\\n    ) external view returns (bool);\\n\\n    function withdraw(\\n        address _loanContractAddress,\\n        uint256 _debtId\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7e3d1db0b042763c42db1232c90f0c10df264a0e399090ad4ff98b68c3e43668\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILoanCodec {\\n    error InactiveLoanState();\\n    error InvalidLoanParameter(bytes4 parameter);\\n\\n    function getDebtTerms(uint256 _debtId) external view returns (bytes32);\\n\\n    function loanState(uint256 _debtId) external view returns (uint256);\\n\\n    function firInterval(uint256 _debtId) external view returns (uint256);\\n\\n    function fixedInterestRate(uint256 _debtId) external view returns (uint256);\\n\\n    function isFixed(uint256 _debtId) external view returns (uint256);\\n\\n    function loanLastChecked(uint256 _debtId) external view returns (uint256);\\n\\n    function loanStart(uint256 _debtId) external view returns (uint256);\\n\\n    function loanDuration(uint256 _debtId) external view returns (uint256);\\n\\n    function loanCommital(uint256 _debtId) external view returns (uint256);\\n\\n    function loanClose(uint256 _debtId) external view returns (uint256);\\n\\n    function lenderRoyalties(uint256 _debtId) external view returns (uint256);\\n\\n    function activeLoanCount(uint256 _debtId) external view returns (uint256);\\n\\n    function totalFirIntervals(\\n        uint256 _debtId,\\n        uint256 _seconds\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb075d4eaa58627726419fb26aa6c1d2434219eb95cb004093b988b7cef27495f\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILoanContract {\\n    error InvalidCollateral();\\n    error InvalidParticipant();\\n    error FailedFundsTransfer();\\n    error ExceededRefinanceLimit();\\n\\n    struct Debt {\\n        uint256 debtId;\\n        uint256 collateralNonce;\\n        uint256 activeLoanIndex;\\n    }\\n\\n    event LoanContractInitialized(\\n        address indexed collateralAddress,\\n        uint256 indexed collateralId,\\n        uint256 indexed debtId,\\n        uint256 activeLoanIndex\\n    );\\n\\n    event PaymentSubmitted(\\n        uint256 indexed debtId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint256 amount\\n    );\\n\\n    event LoanBorrowerChanged(\\n        uint256 indexed debtId,\\n        address indexed newBorrower,\\n        address indexed oldBorrower\\n    );\\n\\n    function totalDebts() external returns (uint256);\\n\\n    function debts(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) external returns (uint256, uint256, uint256);\\n\\n    function debtIdBranch(uint256 _childDebtId) external returns (uint256, uint256, uint256);\\n\\n    function debtBalanceOf(uint256 _debtId) external view returns (uint256);\\n\\n    function getCollateralNonce(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) external view returns (uint256);\\n\\n    function getCollateralDebtId(\\n        address _collateralAddress,\\n        uint256 _collateralId\\n    ) external view returns (uint256);\\n\\n    function initLoanContract(\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        bytes calldata _borrowerSignature\\n    ) external payable;\\n\\n    function initLoanContract(\\n        bytes32 _contractTerms,\\n        uint256 _debtId,\\n        bytes calldata _borrowerSignature\\n    ) external payable;\\n\\n    function mintReplica(uint256 _debtId) external;\\n}\\n\",\"keccak256\":\"0x4dffcda95b40bcf225aa3c5c41a76cb6a186439ab33789be9fd268ab153fba62\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILoanManager {\\n    event LoanTermsRevoked(\\n        address indexed borrower,\\n        bytes32 indexed hashedTerms\\n    );\\n\\n    event LoanTermsReinstated(\\n        address indexed borrower,\\n        bytes32 indexed hashedTerms\\n    );\\n\\n    function maxRefinances() external returns (uint256);\\n\\n    function setMaxRefinances(uint256 _maxRefinances) external;\\n\\n    function updateLoanState(uint256 _debtId) external;\\n\\n    function verifyLoanActive(uint256 _debtId) external view;\\n\\n    function checkLoanActive(uint256 _debtId) external view returns (bool);\\n\\n    function checkLoanDefault(uint256 _debtId) external view returns (bool);\\n\\n    function checkLoanExpired(uint256 _debtId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c162bada3001437b023fa4b8290c9ec801704d6c4a54b35943e1f8bcfebae5b\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanTreasurey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILoanTreasurey {\\n    error InvalidParticipant();\\n    error InvalidFundsTransfer();\\n    error InactiveLoanState();\\n    error InvalidLoanState();\\n\\n    event Deposited(\\n        uint256 indexed debtId,\\n        address indexed payer,\\n        uint256 weiAmount\\n    );\\n\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    function sponsorPayment(address _sponsor, uint256 _debtId) external payable;\\n\\n    function depositPayment(uint256 _debtId) external payable;\\n\\n    function withdrawFromBalance(uint256 _amount) external returns (bool);\\n\\n    function withdrawCollateral(uint256 _debtId) external returns (bool);\\n\\n    function executeDebtPurchase(\\n        uint256 _debtId,\\n        address _borrower,\\n        address _purchaser\\n    ) external payable returns (bool);\\n\\n    function updateDebt(uint256 _debtId) external;\\n}\\n\",\"keccak256\":\"0x7c40a0f73de3a9c4519c870882072026dc80275c61e7dbf23f2646dbc0f0b163\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasureyAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ILoanContract.sol\\\";\\nimport \\\"../interfaces/ILoanCodec.sol\\\";\\nimport \\\"../interfaces/ILoanManager.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/IAnzaToken.sol\\\";\\n\\ninterface ITreasureyAccessController {\\n    function anzaToken() external view returns (address);\\n\\n    function loanContract() external view returns (address);\\n\\n    function collateralVault() external view returns (address);\\n\\n    function setAnzaToken(address _anzaTokenAddress) external;\\n\\n    function setLoanContract(address _loanContractAddress) external;\\n\\n    function setCollateralVault(address _collateralVaultAddress) external;\\n}\\n\",\"keccak256\":\"0x5657b8515c12d06304267a4953ad11fddbe43d47ee6a25598734b7e0ad57d8b2\",\"license\":\"MIT\"},\"contracts/libraries/LibLoanContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../domain/LoanContractFIRIntervals.sol\\\";\\nimport \\\"../domain/LoanContractTermMaps.sol\\\";\\n\\nimport \\\"../abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nlibrary LibLoanContractSigning {\\n    struct ContractTerms {\\n        uint256 firInterval;\\n        uint8 fixedInterestRate;\\n        uint8 isFixed;\\n        uint8 commital;\\n        uint128 principal;\\n        uint32 gracePeriod;\\n        uint32 duration;\\n        uint32 termsExpiry;\\n        uint8 lenderRoyalties;\\n    }\\n\\n    function createContractTerms(\\n        uint8 _firInterval,\\n        uint8 _fixedInterestRate,\\n        uint8 _isFixed,\\n        uint8 _commital,\\n        uint32 _gracePeriod,\\n        uint32 _duration,\\n        uint32 _termsExpiry,\\n        uint8 _lenderRoyalties\\n    ) public pure returns (bytes32 _contractTerms) {\\n        assembly {\\n            mstore(0x20, _firInterval)\\n            mstore(0x1f, _fixedInterestRate)\\n\\n            switch eq(_isFixed, 0x01)\\n            case true {\\n                mstore(0x1e, add(0x65, _commital))\\n            }\\n            case false {\\n                mstore(0x1e, _commital)\\n            }\\n\\n            mstore(0x0d, _gracePeriod)\\n            mstore(0x09, _duration)\\n            mstore(0x05, _termsExpiry)\\n            mstore(0x01, _lenderRoyalties)\\n\\n            _contractTerms := mload(0x20)\\n        }\\n    }\\n\\n    function recoverSigner(\\n        uint256 _principal,\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _collateralNonce,\\n        bytes memory _signature\\n    ) public pure returns (address) {\\n        bytes32 _message = prefixed(\\n            keccak256(\\n                abi.encode(\\n                    _principal,\\n                    _contractTerms,\\n                    _collateralAddress,\\n                    _collateralId,\\n                    _collateralNonce\\n                )\\n            )\\n        );\\n\\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n\\n        return ecrecover(_message, v, r, s);\\n    }\\n\\n    function hashMessage(\\n        uint256 _principal,\\n        bytes32 _contractTerms,\\n        address _collateralAddress,\\n        uint256 _collateralId,\\n        uint256 _collateralNonce\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _principal,\\n                    _contractTerms,\\n                    _collateralAddress,\\n                    _collateralId,\\n                    _collateralNonce\\n                )\\n            );\\n    }\\n\\n    function prefixed(bytes32 _hash) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _hash)\\n            );\\n    }\\n\\n    function splitSignature(\\n        bytes memory _signature\\n    ) public pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n    }\\n}\\n\\nlibrary LibLoanContractIndexer {\\n    function getBorrowerTokenId(uint256 _debtId) public pure returns (uint256) {\\n        return (2 * _debtId) + 1;\\n    }\\n\\n    function getLenderTokenId(uint256 _debtId) public pure returns (uint256) {\\n        return (2 * _debtId);\\n    }\\n}\\n\\nlibrary LibLoanContractTerms {\\n    struct ContractTerms {\\n        uint256 loanState;\\n        uint256 firInterval;\\n        uint256 fixedInterestRate;\\n        uint256 loanStart;\\n        uint256 loanDuration;\\n        uint256 loanCommital;\\n        uint256 loanCommitalTime;\\n        uint256 loanClose;\\n        uint256 isFixed;\\n        uint256 lenderRoyalties;\\n        uint256 activeLoanCount;\\n    }\\n\\n    function loanState(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanState) {\\n        uint8 __loanState;\\n\\n        assembly {\\n            __loanState := and(_contractTerms, _LOAN_STATE_MAP_)\\n        }\\n\\n        unchecked {\\n            _loanState = __loanState;\\n        }\\n    }\\n\\n    function firInterval(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _firInterval) {\\n        uint8 __firInterval;\\n\\n        assembly {\\n            __firInterval := shr(\\n                _FIR_INTERVAL_POS_,\\n                and(_contractTerms, _FIR_INTERVAL_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _firInterval = __firInterval;\\n        }\\n    }\\n\\n    function fixedInterestRate(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _fixedInterestRate) {\\n        bytes32 __fixedInterestRate;\\n\\n        assembly {\\n            __fixedInterestRate := shr(\\n                _FIR_POS_,\\n                and(_contractTerms, _FIR_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _fixedInterestRate = uint256(__fixedInterestRate);\\n        }\\n    }\\n\\n    function loanLastChecked(\\n        bytes32 _contractTerms\\n    ) external pure returns (uint256) {\\n        return loanStart(_contractTerms);\\n    }\\n\\n    function loanStart(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanStart) {\\n        uint32 __loanStart;\\n\\n        assembly {\\n            __loanStart := shr(\\n                _LOAN_START_POS_,\\n                and(_contractTerms, _LOAN_START_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanStart = __loanStart;\\n        }\\n    }\\n\\n    function loanDuration(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanDuration) {\\n        uint32 __loanDuration;\\n\\n        assembly {\\n            __loanDuration := shr(\\n                _LOAN_DURATION_POS_,\\n                and(_contractTerms, _LOAN_DURATION_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanDuration = __loanDuration;\\n        }\\n    }\\n\\n    function loanCommital(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanCommital) {\\n        uint32 __loanCommital;\\n\\n        assembly {\\n            __loanCommital := shr(\\n                _COMMITAL_POS_,\\n                and(_contractTerms, _COMMITAL_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _loanCommital = __loanCommital;\\n        }\\n    }\\n\\n    function loanCommitalTime(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256) {\\n        int128 _loanStart = ABDKMath64x64.fromUInt(loanStart(_contractTerms));\\n        int128 _loanDuration = ABDKMath64x64.fromUInt(\\n            loanDuration(_contractTerms)\\n        );\\n        int128 _ratio = ABDKMath64x64.divu(loanCommital(_contractTerms), 100);\\n        int128 _commitalPeriod = ABDKMath64x64.mul(_loanDuration, _ratio);\\n        int128 _commitalTime = ABDKMath64x64.add(_loanStart, _commitalPeriod);\\n\\n        return ABDKMath64x64.toUInt(_commitalTime);\\n    }\\n\\n    function isFixed(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _isFixed) {\\n        uint32 __isFixed;\\n\\n        assembly {\\n            __isFixed := shr(\\n                _IS_FIXED_POS_,\\n                and(_contractTerms, _IS_FIXED_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _isFixed = __isFixed;\\n        }\\n    }\\n\\n    function loanClose(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _loanClose) {\\n        uint32 __loanClose;\\n\\n        assembly {\\n            __loanClose := add(\\n                shr(_LOAN_START_POS_, and(_contractTerms, _LOAN_START_MAP_)),\\n                shr(\\n                    _LOAN_DURATION_POS_,\\n                    and(_contractTerms, _LOAN_DURATION_MAP_)\\n                )\\n            )\\n        }\\n\\n        unchecked {\\n            _loanClose = __loanClose;\\n        }\\n    }\\n\\n    function lenderRoyalties(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _lenderRoyalties) {\\n        assembly {\\n            _lenderRoyalties := shr(\\n                _LENDER_ROYALTIES_POS_,\\n                and(_contractTerms, _LENDER_ROYALTIES_MAP_)\\n            )\\n        }\\n    }\\n\\n    function activeLoanCount(\\n        bytes32 _contractTerms\\n    ) public pure returns (uint256 _activeLoanCount) {\\n        uint8 __activeLoanCount;\\n\\n        assembly {\\n            __activeLoanCount := shr(\\n                _LOAN_COUNT_POS_,\\n                and(_contractTerms, _LOAN_COUNT_MAP_)\\n            )\\n        }\\n\\n        unchecked {\\n            _activeLoanCount = __activeLoanCount;\\n        }\\n    }\\n}\\n\\nlibrary LibLoanContractInterest {\\n    function compoundWithTopoff(\\n        uint256 _principal,\\n        uint256 _ratio,\\n        uint256 _n\\n    ) public pure returns (uint256) {\\n        return\\n            compound(_principal, _ratio, _n) + topoff(_principal, _ratio, _n);\\n    }\\n\\n    function compound(\\n        uint256 _principal,\\n        uint256 _ratio,\\n        uint256 _n\\n    ) public pure returns (uint256) {\\n        return\\n            ABDKMath64x64.mulu(\\n                pow(\\n                    ABDKMath64x64.add(\\n                        ABDKMath64x64.fromUInt(1),\\n                        ABDKMath64x64.divu(_ratio, 100)\\n                    ),\\n                    _n\\n                ),\\n                _principal\\n            );\\n    }\\n\\n    function pow(int128 _x, uint256 _n) public pure returns (int128) {\\n        int128 _r = ABDKMath64x64.fromUInt(1);\\n\\n        while (_n > 0) {\\n            if (_n % 2 == 1) {\\n                _r = ABDKMath64x64.mul(_r, _x);\\n                _n -= 1;\\n            } else {\\n                _x = ABDKMath64x64.mul(_x, _x);\\n                _n /= 2;\\n            }\\n        }\\n\\n        return _r;\\n    }\\n\\n    // Topoff to account for small inaccuracies in compound calculations\\n    function topoff(\\n        uint256 _totalDebt,\\n        uint256 _fixedInterestRate,\\n        uint256 _firIntervals\\n    ) public pure returns (uint256) {\\n        return\\n            _fixedInterestRate == 100 ? 0 : _fixedInterestRate >= 10\\n                ? _firIntervals == 1 && _totalDebt >= 10\\n                    ? 1\\n                    : _totalDebt >= 1000\\n                    ? (_totalDebt / (10 ** 21)) >= 1 ? 10 : 1\\n                    : 0\\n                : _fixedInterestRate == 1\\n                ? _firIntervals == 1 && _totalDebt >= 100\\n                    ? (_totalDebt / (10 ** 21)) >= 1 ? 10 : 1\\n                    : 0\\n                : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x61ff945e4c1ea5f23d2bf6ab7fefd1d8345f972ef6d2cd201e386922025ab428\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801562000010575f80fd5b506200002b5f8051602062001ff983398151915280620000b2565b620000535f8051602062001fd98339815191525f8051602062001ff9833981519152620000b2565b6200008d7f6ff243dd0433898c62e5507995453d38065c2abe8d8faf3cc448711da30c566a5f8051602062001ff9833981519152620000b2565b620000a75f8051602062001ff983398151915233620000fc565b6001600655620002c0565b5f82815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b5f8051602062001fd9833981519152820362000121576200011d816200012d565b5050565b6200011d8282620001a4565b60015462000154905f8051602062001fd9833981519152906001600160a01b031662000242565b6200016e5f8051602062001fd983398151915282620001a4565b600180546001600160a01b039092166001600160a01b031992831681179091556002805483168217905560038054909216179055565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166200011d575f828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b5f828152602081815260408083206001600160a01b038516845290915290205460ff16156200011d575f828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611d0b80620002ce5f395ff3fe60806040526004361061013c575f3560e01c80636b749c47116100b3578063a217fddf1161006d578063a217fddf1461036f578063b3e90a8214610382578063bab68c2114610395578063d547741f146103b4578063d706b7c2146103d3578063ef30ecac146103f2575f80fd5b80636b749c47146102e357806386cd0a47146102f657806390d17f1114610309578063919747fb1461032857806391d148541461033b57806396365d441461035a575f80fd5b8063253f284b11610104578063253f284b146102295780632f2ff15d1461024657806331d388061461026757806336568abe146102865780636112fe2e146102a557806368a806c4146102c4575f80fd5b806301ffc9a71461014057806302b62938146101745780630bece79c146101ad578063188e4681146101de578063248a9ca3146101fb575b5f80fd5b34801561014b575f80fd5b5061015f61015a366004611996565b610411565b60405190151581526020015b60405180910390f35b34801561017f575f80fd5b5061019f61018e3660046119d1565b60086020525f908152604090205481565b60405190815260200161016b565b3480156101b8575f80fd5b506004546001600160a01b03165b6040516001600160a01b03909116815260200161016b565b3480156101e9575f80fd5b506005546001600160a01b03166101c6565b348015610206575f80fd5b5061019f6102153660046119ec565b5f9081526020819052604090206001015490565b348015610234575f80fd5b506001546001600160a01b03166101c6565b348015610251575f80fd5b50610265610260366004611a03565b610447565b005b348015610272575f80fd5b506102656102813660046119d1565b610470565b348015610291575f80fd5b506102656102a0366004611a03565b610494565b3480156102b0575f80fd5b5061015f6102bf3660046119ec565b610513565b3480156102cf575f80fd5b506102656102de3660046119d1565b610586565b6102656102f13660046119ec565b6105c0565b610265610304366004611a31565b6107de565b348015610314575f80fd5b506102656103233660046119d1565b61096e565b6102656103363660046119d1565b6109a8565b348015610346575f80fd5b5061015f610355366004611a03565b610a2b565b348015610365575f80fd5b5061019f60075481565b34801561037a575f80fd5b5061019f5f81565b61015f610390366004611a5b565b610a53565b3480156103a0575f80fd5b5061019f6103af3660046119ec565b610d68565b3480156103bf575f80fd5b506102656103ce366004611a03565b610de3565b3480156103de575f80fd5b506102656103ed3660046119ec565b610e07565b3480156103fd575f80fd5b5061015f61040c3660046119ec565b6111a3565b5f6001600160e01b03198216637965db0b60e01b148061044157506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f82815260208190526040902060010154610461816112a9565b61046b83836112b6565b505050565b5f80516020611c96833981519152610487816112a9565b610490826112dd565b5050565b6001600160a01b03811633146105095760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610490828261134e565b6004805460405163f3fef3a360e01b81525f926001600160a01b039092169163f3fef3a391610546913391879101611a9a565b6020604051808303815f875af1158015610562573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104419190611ab3565b5f80516020611c9683398151915261059d816112a9565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6003546040516356f9654b60e01b81526004810183905282916001600160a01b0316906356f9654b906024015f6040518083038186803b158015610602575f80fd5b505afa158015610614573d5f803e3d5ffd5b505050508161062281610e07565b6003546040516367c2e33f60e01b8152600481018390526001600160a01b03909116906367c2e33f90602401602060405180830381865afa158015610669573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068d9190611ab3565b61046b5733345f8190036106b4576040516305d3a4cd60e11b815260040160405180910390fd5b60055460405163163be8c160e11b81526001600160a01b0390911690632c77d182906106e69085908990600401611a9a565b602060405180830381865afa158015610701573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107259190611ab3565b610742576040516350a2e21f60e11b815260040160405180910390fd5b61074d8286836113b2565b816001600160a01b0316855f80516020611cb68339815191528360405161077691815260200190565b60405180910390a35050600354604051630e89866b60e11b8152600481018390526001600160a01b0390911690631d130cd6906024015f604051808303815f87803b1580156107c3575f80fd5b505af11580156107d5573d5f803e3d5ffd5b50505050505050565b6003546040516356f9654b60e01b81526004810183905282916001600160a01b0316906356f9654b906024015f6040518083038186803b158015610820575f80fd5b505afa158015610832573d5f803e3d5ffd5b505050508161084081610e07565b6003546040516367c2e33f60e01b8152600481018390526001600160a01b03909116906367c2e33f90602401602060405180830381865afa158015610887573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ab9190611ab3565b61096857345f8190036108d1576040516305d3a4cd60e11b815260040160405180910390fd5b6108dc8585836113b2565b846001600160a01b0316845f80516020611cb68339815191528360405161090591815260200190565b60405180910390a350600354604051630e89866b60e11b8152600481018390526001600160a01b0390911690631d130cd6906024015f604051808303815f87803b158015610951575f80fd5b505af1158015610963573d5f803e3d5ffd5b505050505b50505050565b5f80516020611c96833981519152610985816112a9565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b5f80516020611c768339815191526109bf816112a9565b6109c76116b2565b6001600160a01b0382165f90815260086020526040812080543492906109ee908490611ae6565b90915550506040513481526001600160a01b038316905f19905f80516020611cb68339815191529060200160405180910390a36104906001600655565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f7f6ff243dd0433898c62e5507995453d38065c2abe8d8faf3cc448711da30c566a610a7e816112a9565b6003546040516356f9654b60e01b81526004810187905286916001600160a01b0316906356f9654b906024015f6040518083038186803b158015610ac0575f80fd5b505afa158015610ad2573d5f803e3d5ffd5b5050505085610ae081610e07565b6003546040516367c2e33f60e01b8152600481018390526001600160a01b03909116906367c2e33f90602401602060405180830381865afa158015610b27573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b4b9190611ab3565b610d5e5760015460405162888b6d60e41b8152600481018990525f916001600160a01b031690630888b6d090602401602060405180830381865afa158015610b95573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bb99190611af9565b905034818110610c7c57610bce878a846113b2565b6004805460405163f3fef3a360e01b81526001600160a01b039091169163f3fef3a391610bff918b918e9101611a9a565b6020604051808303815f875af1158015610c1b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c3f9190611ab3565b50610c4a8282611b10565b6001600160a01b0389165f9081526008602052604081208054909190610c71908490611ae6565b90915550610cfe9050565b610c87878a836113b2565b600554604051632d6dfe7360e21b81526001600160a01b038a811660048301528981166024830152604482018c9052608060648301525f60848301529091169063b5b7f9cc9060a4015f604051808303815f87803b158015610ce7575f80fd5b505af1158015610cf9573d5f803e3d5ffd5b505050505b5050600354604051630e89866b60e11b815260048101839052600195506001600160a01b0390911690631d130cd6906024015f604051808303815f87803b158015610d47575f80fd5b505af1158015610d59573d5f803e3d5ffd5b505050505b5050509392505050565b6005545f906001600160a01b031663bd85b039610d86846002611b23565b6040518263ffffffff1660e01b8152600401610da491815260200190565b602060405180830381865afa158015610dbf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104419190611af9565b5f82815260208190526040902060010154610dfd816112a9565b61046b838361134e565b60025460405163a796d4df60e01b8152600481018390525f916001600160a01b03169063a796d4df90602401602060405180830381865afa158015610e4e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e729190611af9565b600354604051630e89866b60e11b8152600481018590529192506001600160a01b031690631d130cd6906024015f604051808303815f87803b158015610eb6575f80fd5b505af1158015610ec8573d5f803e3d5ffd5b505060025460405163a796d4df60e01b8152600481018690525f93506001600160a01b039091169150639f590b7b9085908590849063a796d4df90602401602060405180830381865afa158015610f21573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f459190611af9565b610f4f9190611b10565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015610f8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fb29190611af9565b9050801561046b576005545f906001600160a01b031663bd85b039610fd8866002611b23565b6040518263ffffffff1660e01b8152600401610ff691815260200190565b602060405180830381865afa158015611011573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110359190611af9565b6002546040516323502ca360e21b8152600481018790529192505f91732279B7A0a67DB372996a5FaB50D91eAA73d2eBe691636d8866f19185916001600160a01b031690638d40b28c90602401602060405180830381865afa15801561109d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110c19190611af9565b6040516001600160e01b031960e085901b1681526004810192909252602482015260448101869052606401602060405180830381865af4158015611107573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061112b9190611af9565b6005549091506001600160a01b0316631b2ef1ca8661114a8585611b10565b6040516001600160e01b031960e085901b168152600481019290925260248201526044015b5f604051808303815f87803b158015611186575f80fd5b505af1158015611198573d5f803e3d5ffd5b505050505050505050565b5f6111ac6116b2565b335f8390036111ce576040516305d3a4cd60e11b815260040160405180910390fd5b6001600160a01b0381165f90815260086020526040812080548592906111f5908490611b10565b90915550506040515f906001600160a01b0383169085908381818185875af1925050503d805f8114611242576040519150601f19603f3d011682016040523d82523d5f602084013e611247565b606091505b5050905080611254575f80fd5b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58560405161128f91815260200190565b60405180910390a29150506112a46001600655565b919050565b6112b3813361170b565b50565b5f80516020611c7683398151915282036112d357610490816112dd565b6104908282611764565b600154611301905f80516020611c76833981519152906001600160a01b031661134e565b6113185f80516020611c7683398151915282611764565b600180546001600160a01b039092166001600160a01b031992831681179091556002805483168217905560038054909216179055565b6113588282610a2b565b15610490575f828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600554604051630799ef7760e11b8152600481018490525f916001600160a01b031690630f33deee90602401602060405180830381865afa1580156113f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061141d9190611b3a565b6005549091505f906001600160a01b031662fdd58e8361143e876002611b23565b6040518363ffffffff1660e01b815260040161145b929190611a9a565b602060405180830381865afa158015611476573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061149a9190611af9565b90508281111561153e576001600160a01b0382165f90815260086020526040812080548592906114cb908490611ae6565b90915550506005546001600160a01b031663f5298aca836114ed876002611b23565b866040518463ffffffff1660e01b815260040161150c93929190611b55565b5f604051808303815f87803b158015611523575f80fd5b505af1158015611535573d5f803e3d5ffd5b5050505061160b565b6001600160a01b0382165f9081526008602052604081208054839290611565908490611ae6565b9091555061157590508184611b10565b6001600160a01b0386165f908152600860205260408120805490919061159c908490611ae6565b90915550506005546001600160a01b031663f5298aca836115be876002611b23565b846040518463ffffffff1660e01b81526004016115dd93929190611b55565b5f604051808303815f87803b1580156115f4575f80fd5b505af1158015611606573d5f803e3d5ffd5b505050505b600354604051633a189f8960e21b8152600481018690526001600160a01b039091169063e8627e2490602401602060405180830381865afa158015611652573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116769190611ab3565b6116ab5760055460405163150f60ed60e11b8152600481018690526001600160a01b0390911690632a1ec1da9060240161116f565b5050505050565b6002600654036117045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610500565b6002600655565b6117158282610a2b565b61049057611722816117e7565b61172d8360206117f9565b60405160200161173e929190611b98565b60408051601f198184030181529082905262461bcd60e51b825261050091600401611c06565b61176e8282610a2b565b610490575f828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117a33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60606104416001600160a01b03831660145b60605f611807836002611b23565b611812906002611ae6565b67ffffffffffffffff81111561182a5761182a611c38565b6040519080825280601f01601f191660200182016040528015611854576020820181803683370190505b509050600360fc1b815f8151811061186e5761186e611c4c565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061189c5761189c611c4c565b60200101906001600160f81b03191690815f1a9053505f6118be846002611b23565b6118c9906001611ae6565b90505b6001811115611940576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118fd576118fd611c4c565b1a60f81b82828151811061191357611913611c4c565b60200101906001600160f81b03191690815f1a90535060049490941c9361193981611c60565b90506118cc565b50831561198f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610500565b9392505050565b5f602082840312156119a6575f80fd5b81356001600160e01b03198116811461198f575f80fd5b6001600160a01b03811681146112b3575f80fd5b5f602082840312156119e1575f80fd5b813561198f816119bd565b5f602082840312156119fc575f80fd5b5035919050565b5f8060408385031215611a14575f80fd5b823591506020830135611a26816119bd565b809150509250929050565b5f8060408385031215611a42575f80fd5b8235611a4d816119bd565b946020939093013593505050565b5f805f60608486031215611a6d575f80fd5b833592506020840135611a7f816119bd565b91506040840135611a8f816119bd565b809150509250925092565b6001600160a01b03929092168252602082015260400190565b5f60208284031215611ac3575f80fd5b8151801515811461198f575f80fd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561044157610441611ad2565b5f60208284031215611b09575f80fd5b5051919050565b8181038181111561044157610441611ad2565b808202811582820484141761044157610441611ad2565b5f60208284031215611b4a575f80fd5b815161198f816119bd565b6001600160a01b039390931683526020830191909152604082015260600190565b5f5b83811015611b90578181015183820152602001611b78565b50505f910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81525f8351611bc9816017850160208801611b76565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611bfa816028840160208801611b76565b01602801949350505050565b602081525f8251806020840152611c24816040850160208701611b76565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f81611c6e57611c6e611ad2565b505f19019056feaca95a87ebdd693d0a3734440ea0ab66d6317f6d32766e386292131defadde1ac9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f121599c0fcf897af5babc2bfcf707f5dc050f841b044d97c3251ecec35b9abf80ba2646970667358221220beba58568050f352680e68de16f1ef6de36c2885953875463788dac9b69deb1364736f6c63430008140033aca95a87ebdd693d0a3734440ea0ab66d6317f6d32766e386292131defadde1ac9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f12",
  "deployedBytecode": "$7ff1827adbcc406cbe9f732ad7b1b7248b$__91636d8866f19185916001600160a01b031690638d40b28c90602401602060405180830381865afa15801561109d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110c19190611af9565b6040516001600160e01b031960e085901b1681526004810192909252602482015260448101869052606401602060405180830381865af4158015611107573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061112b9190611af9565b6005549091506001600160a01b0316631b2ef1ca8661114a8585611b10565b6040516001600160e01b031960e085901b168152600481019290925260248201526044015b5f604051808303815f87803b158015611186575f80fd5b505af1158015611198573d5f803e3d5ffd5b505050505050505050565b5f6111ac6116b2565b335f8390036111ce576040516305d3a4cd60e11b815260040160405180910390fd5b6001600160a01b0381165f90815260086020526040812080548592906111f5908490611b10565b90915550506040515f906001600160a01b0383169085908381818185875af1925050503d805f8114611242576040519150601f19603f3d011682016040523d82523d5f602084013e611247565b606091505b5050905080611254575f80fd5b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58560405161128f91815260200190565b60405180910390a29150506112a46001600655565b919050565b6112b3813361170b565b50565b5f80516020611c7683398151915282036112d357610490816112dd565b6104908282611764565b600154611301905f80516020611c76833981519152906001600160a01b031661134e565b6113185f80516020611c7683398151915282611764565b600180546001600160a01b039092166001600160a01b031992831681179091556002805483168217905560038054909216179055565b6113588282610a2b565b15610490575f828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600554604051630799ef7760e11b8152600481018490525f916001600160a01b031690630f33deee90602401602060405180830381865afa1580156113f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061141d9190611b3a565b6005549091505f906001600160a01b031662fdd58e8361143e876002611b23565b6040518363ffffffff1660e01b815260040161145b929190611a9a565b602060405180830381865afa158015611476573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061149a9190611af9565b90508281111561153e576001600160a01b0382165f90815260086020526040812080548592906114cb908490611ae6565b90915550506005546001600160a01b031663f5298aca836114ed876002611b23565b866040518463ffffffff1660e01b815260040161150c93929190611b55565b5f604051808303815f87803b158015611523575f80fd5b505af1158015611535573d5f803e3d5ffd5b5050505061160b565b6001600160a01b0382165f9081526008602052604081208054839290611565908490611ae6565b9091555061157590508184611b10565b6001600160a01b0386165f908152600860205260408120805490919061159c908490611ae6565b90915550506005546001600160a01b031663f5298aca836115be876002611b23565b846040518463ffffffff1660e01b81526004016115dd93929190611b55565b5f604051808303815f87803b1580156115f4575f80fd5b505af1158015611606573d5f803e3d5ffd5b505050505b600354604051633a189f8960e21b8152600481018690526001600160a01b039091169063e8627e2490602401602060405180830381865afa158015611652573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116769190611ab3565b6116ab5760055460405163150f60ed60e11b8152600481018690526001600160a01b0390911690632a1ec1da9060240161116f565b5050505050565b6002600654036117045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610500565b6002600655565b6117158282610a2b565b61049057611722816117e7565b61172d8360206117f9565b60405160200161173e929190611b98565b60408051601f198184030181529082905262461bcd60e51b825261050091600401611c06565b61176e8282610a2b565b610490575f828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117a33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60606104416001600160a01b03831660145b60605f611807836002611b23565b611812906002611ae6565b67ffffffffffffffff81111561182a5761182a611c38565b6040519080825280601f01601f191660200182016040528015611854576020820181803683370190505b509050600360fc1b815f8151811061186e5761186e611c4c565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061189c5761189c611c4c565b60200101906001600160f81b03191690815f1a9053505f6118be846002611b23565b6118c9906001611ae6565b90505b6001811115611940576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118fd576118fd611c4c565b1a60f81b82828151811061191357611913611c4c565b60200101906001600160f81b03191690815f1a90535060049490941c9361193981611c60565b90506118cc565b50831561198f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610500565b9392505050565b5f602082840312156119a6575f80fd5b81356001600160e01b03198116811461198f575f80fd5b6001600160a01b03811681146112b3575f80fd5b5f602082840312156119e1575f80fd5b813561198f816119bd565b5f602082840312156119fc575f80fd5b5035919050565b5f8060408385031215611a14575f80fd5b823591506020830135611a26816119bd565b809150509250929050565b5f8060408385031215611a42575f80fd5b8235611a4d816119bd565b946020939093013593505050565b5f805f60608486031215611a6d575f80fd5b833592506020840135611a7f816119bd565b91506040840135611a8f816119bd565b809150509250925092565b6001600160a01b03929092168252602082015260400190565b5f60208284031215611ac3575f80fd5b8151801515811461198f575f80fd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561044157610441611ad2565b5f60208284031215611b09575f80fd5b5051919050565b8181038181111561044157610441611ad2565b808202811582820484141761044157610441611ad2565b5f60208284031215611b4a575f80fd5b815161198f816119bd565b6001600160a01b039390931683526020830191909152604082015260600190565b5f5b83811015611b90578181015183820152602001611b78565b50505f910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81525f8351611bc9816017850160208801611b76565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611bfa816028840160208801611b76565b01602801949350505050565b602081525f8251806020840152611c24816040850160208701611b76565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f81611c6e57611c6e611ad2565b505f19019056feaca95a87ebdd693d0a3734440ea0ab66d6317f6d32766e386292131defadde1ac9d3ed72b71767c9a467f79cf288882213fa725f40ea5b833a2b70350c4e0f121599c0fcf897af5babc2bfcf707f5dc050f841b044d97c3251ecec35b9abf80ba2646970667358221220beba58568050f352680e68de16f1ef6de36c2885953875463788dac9b69deb1364736f6c63430008140033",
  "libraries": {
    "LibLoanContractInterest": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6"
  },
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 24418,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_loanContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILoanContract)25826"
      },
      {
        "astId": 24421,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_loanCodec",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILoanCodec)25701"
      },
      {
        "astId": 24424,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_loanManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILoanManager)25882"
      },
      {
        "astId": 24427,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_loanCollateralVault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICollateralVault)25599"
      },
      {
        "astId": 24430,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_anzaToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IAnzaToken)25516"
      },
      {
        "astId": 4064,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15692,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "poolBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15696,
        "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
        "label": "withdrawableBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAnzaToken)25516": {
        "encoding": "inplace",
        "label": "contract IAnzaToken",
        "numberOfBytes": "20"
      },
      "t_contract(ICollateralVault)25599": {
        "encoding": "inplace",
        "label": "contract ICollateralVault",
        "numberOfBytes": "20"
      },
      "t_contract(ILoanCodec)25701": {
        "encoding": "inplace",
        "label": "contract ILoanCodec",
        "numberOfBytes": "20"
      },
      "t_contract(ILoanContract)25826": {
        "encoding": "inplace",
        "label": "contract ILoanContract",
        "numberOfBytes": "20"
      },
      "t_contract(ILoanManager)25882": {
        "encoding": "inplace",
        "label": "contract ILoanManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LoanTreasurey.sol:LoanTreasurey",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}